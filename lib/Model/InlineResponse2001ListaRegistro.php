<?php
/**
 * InlineResponse2001ListaRegistro
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Cobranças API
 *
 * API para gerenciar os serviços de cobranças de cliente do Banco do Brasil S.A.
 *
 * OpenAPI spec version: 2.17.3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.57
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * InlineResponse2001ListaRegistro Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class InlineResponse2001ListaRegistro implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'inline_response_200_1_listaRegistro';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'data_movimento_retorno' => 'string',
        'numero_convenio' => 'int',
        'numero_titulo_cobranca' => 'string',
        'codigo_comando_acao' => 'int',
        'codigo_prefixo_agencia' => 'int',
        'numero_conta_corrente' => 'int',
        'numero_carteira_cobranca' => 'int',
        'numero_variacao_carteira_cobranca' => 'int',
        'tipo_cobranca' => 'int',
        'codigo_controle_participante' => 'string',
        'codigo_especie_boleto' => 'int',
        'data_vencimento_boleto' => 'string',
        'valor_boleto' => 'double',
        'codigo_banco_recebedor' => 'int',
        'codigo_prefixo_agencia_recebedora' => 'int',
        'data_credito_pagamento_boleto' => 'string',
        'valor_tarifa' => 'double',
        'valor_outras_despesas_calculadas' => 'double',
        'valor_juros_desconto' => 'double',
        'valor_iof_desconto' => 'double',
        'valor_abatimento' => 'double',
        'valor_desconto' => 'double',
        'valor_recebido' => 'double',
        'valor_juros_mora' => 'double',
        'valor_outros_valores_recebidos' => 'double',
        'valor_abatimento_nao_utilizado' => 'double',
        'valor_lancamento' => 'double',
        'codigo_forma_pagamento' => 'int',
        'codigo_valor_ajuste' => 'int',
        'valor_ajuste' => 'double',
        'codigo_autorizacao_pagamento_parcial' => 'int',
        'codigo_canal_pagamento' => 'int',
        'url' => 'string',
        'texto_identificador_qr_code' => 'string',
        'quantidade_dias_calculo' => 'int',
        'valor_taxa_desconto' => 'double',
        'valor_taxa_iof' => 'double',
        'natureza_recebimento' => 'int',
        'codigo_tipo_cobranca_comando' => 'int',
        'data_liquidacao_boleto' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'data_movimento_retorno' => null,
        'numero_convenio' => 'int64',
        'numero_titulo_cobranca' => null,
        'codigo_comando_acao' => 'int32',
        'codigo_prefixo_agencia' => 'int32',
        'numero_conta_corrente' => 'int64',
        'numero_carteira_cobranca' => 'int32',
        'numero_variacao_carteira_cobranca' => 'int32',
        'tipo_cobranca' => 'int32',
        'codigo_controle_participante' => null,
        'codigo_especie_boleto' => 'int32',
        'data_vencimento_boleto' => null,
        'valor_boleto' => 'double',
        'codigo_banco_recebedor' => 'int32',
        'codigo_prefixo_agencia_recebedora' => 'int32',
        'data_credito_pagamento_boleto' => null,
        'valor_tarifa' => 'double',
        'valor_outras_despesas_calculadas' => 'double',
        'valor_juros_desconto' => 'double',
        'valor_iof_desconto' => 'double',
        'valor_abatimento' => 'double',
        'valor_desconto' => 'double',
        'valor_recebido' => 'double',
        'valor_juros_mora' => 'double',
        'valor_outros_valores_recebidos' => 'double',
        'valor_abatimento_nao_utilizado' => 'double',
        'valor_lancamento' => 'double',
        'codigo_forma_pagamento' => 'int32',
        'codigo_valor_ajuste' => 'int32',
        'valor_ajuste' => 'double',
        'codigo_autorizacao_pagamento_parcial' => 'int32',
        'codigo_canal_pagamento' => 'int32',
        'url' => null,
        'texto_identificador_qr_code' => null,
        'quantidade_dias_calculo' => 'int32',
        'valor_taxa_desconto' => 'double',
        'valor_taxa_iof' => 'double',
        'natureza_recebimento' => 'int32',
        'codigo_tipo_cobranca_comando' => 'int32',
        'data_liquidacao_boleto' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'data_movimento_retorno' => 'dataMovimentoRetorno',
        'numero_convenio' => 'numeroConvenio',
        'numero_titulo_cobranca' => 'numeroTituloCobranca',
        'codigo_comando_acao' => 'codigoComandoAcao',
        'codigo_prefixo_agencia' => 'codigoPrefixoAgencia',
        'numero_conta_corrente' => 'numeroContaCorrente',
        'numero_carteira_cobranca' => 'numeroCarteiraCobranca',
        'numero_variacao_carteira_cobranca' => 'numeroVariacaoCarteiraCobranca',
        'tipo_cobranca' => 'tipoCobranca',
        'codigo_controle_participante' => 'codigoControleParticipante',
        'codigo_especie_boleto' => 'codigoEspecieBoleto',
        'data_vencimento_boleto' => 'dataVencimentoBoleto',
        'valor_boleto' => 'valorBoleto',
        'codigo_banco_recebedor' => 'codigoBancoRecebedor',
        'codigo_prefixo_agencia_recebedora' => 'codigoPrefixoAgenciaRecebedora',
        'data_credito_pagamento_boleto' => 'dataCreditoPagamentoBoleto',
        'valor_tarifa' => 'valorTarifa',
        'valor_outras_despesas_calculadas' => 'valorOutrasDespesasCalculadas',
        'valor_juros_desconto' => 'valorJurosDesconto',
        'valor_iof_desconto' => 'valorIofDesconto',
        'valor_abatimento' => 'valorAbatimento',
        'valor_desconto' => 'valorDesconto',
        'valor_recebido' => 'valorRecebido',
        'valor_juros_mora' => 'valorJurosMora',
        'valor_outros_valores_recebidos' => 'valorOutrosValoresRecebidos',
        'valor_abatimento_nao_utilizado' => 'valorAbatimentoNaoUtilizado',
        'valor_lancamento' => 'valorLancamento',
        'codigo_forma_pagamento' => 'codigoFormaPagamento',
        'codigo_valor_ajuste' => 'codigoValorAjuste',
        'valor_ajuste' => 'valorAjuste',
        'codigo_autorizacao_pagamento_parcial' => 'codigoAutorizacaoPagamentoParcial',
        'codigo_canal_pagamento' => 'codigoCanalPagamento',
        'url' => 'URL',
        'texto_identificador_qr_code' => 'textoIdentificadorQRCode',
        'quantidade_dias_calculo' => 'quantidadeDiasCalculo',
        'valor_taxa_desconto' => 'valorTaxaDesconto',
        'valor_taxa_iof' => 'valorTaxaIOF',
        'natureza_recebimento' => 'naturezaRecebimento',
        'codigo_tipo_cobranca_comando' => 'codigoTipoCobrancaComando',
        'data_liquidacao_boleto' => 'dataLiquidacaoBoleto'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'data_movimento_retorno' => 'setDataMovimentoRetorno',
        'numero_convenio' => 'setNumeroConvenio',
        'numero_titulo_cobranca' => 'setNumeroTituloCobranca',
        'codigo_comando_acao' => 'setCodigoComandoAcao',
        'codigo_prefixo_agencia' => 'setCodigoPrefixoAgencia',
        'numero_conta_corrente' => 'setNumeroContaCorrente',
        'numero_carteira_cobranca' => 'setNumeroCarteiraCobranca',
        'numero_variacao_carteira_cobranca' => 'setNumeroVariacaoCarteiraCobranca',
        'tipo_cobranca' => 'setTipoCobranca',
        'codigo_controle_participante' => 'setCodigoControleParticipante',
        'codigo_especie_boleto' => 'setCodigoEspecieBoleto',
        'data_vencimento_boleto' => 'setDataVencimentoBoleto',
        'valor_boleto' => 'setValorBoleto',
        'codigo_banco_recebedor' => 'setCodigoBancoRecebedor',
        'codigo_prefixo_agencia_recebedora' => 'setCodigoPrefixoAgenciaRecebedora',
        'data_credito_pagamento_boleto' => 'setDataCreditoPagamentoBoleto',
        'valor_tarifa' => 'setValorTarifa',
        'valor_outras_despesas_calculadas' => 'setValorOutrasDespesasCalculadas',
        'valor_juros_desconto' => 'setValorJurosDesconto',
        'valor_iof_desconto' => 'setValorIofDesconto',
        'valor_abatimento' => 'setValorAbatimento',
        'valor_desconto' => 'setValorDesconto',
        'valor_recebido' => 'setValorRecebido',
        'valor_juros_mora' => 'setValorJurosMora',
        'valor_outros_valores_recebidos' => 'setValorOutrosValoresRecebidos',
        'valor_abatimento_nao_utilizado' => 'setValorAbatimentoNaoUtilizado',
        'valor_lancamento' => 'setValorLancamento',
        'codigo_forma_pagamento' => 'setCodigoFormaPagamento',
        'codigo_valor_ajuste' => 'setCodigoValorAjuste',
        'valor_ajuste' => 'setValorAjuste',
        'codigo_autorizacao_pagamento_parcial' => 'setCodigoAutorizacaoPagamentoParcial',
        'codigo_canal_pagamento' => 'setCodigoCanalPagamento',
        'url' => 'setUrl',
        'texto_identificador_qr_code' => 'setTextoIdentificadorQrCode',
        'quantidade_dias_calculo' => 'setQuantidadeDiasCalculo',
        'valor_taxa_desconto' => 'setValorTaxaDesconto',
        'valor_taxa_iof' => 'setValorTaxaIof',
        'natureza_recebimento' => 'setNaturezaRecebimento',
        'codigo_tipo_cobranca_comando' => 'setCodigoTipoCobrancaComando',
        'data_liquidacao_boleto' => 'setDataLiquidacaoBoleto'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'data_movimento_retorno' => 'getDataMovimentoRetorno',
        'numero_convenio' => 'getNumeroConvenio',
        'numero_titulo_cobranca' => 'getNumeroTituloCobranca',
        'codigo_comando_acao' => 'getCodigoComandoAcao',
        'codigo_prefixo_agencia' => 'getCodigoPrefixoAgencia',
        'numero_conta_corrente' => 'getNumeroContaCorrente',
        'numero_carteira_cobranca' => 'getNumeroCarteiraCobranca',
        'numero_variacao_carteira_cobranca' => 'getNumeroVariacaoCarteiraCobranca',
        'tipo_cobranca' => 'getTipoCobranca',
        'codigo_controle_participante' => 'getCodigoControleParticipante',
        'codigo_especie_boleto' => 'getCodigoEspecieBoleto',
        'data_vencimento_boleto' => 'getDataVencimentoBoleto',
        'valor_boleto' => 'getValorBoleto',
        'codigo_banco_recebedor' => 'getCodigoBancoRecebedor',
        'codigo_prefixo_agencia_recebedora' => 'getCodigoPrefixoAgenciaRecebedora',
        'data_credito_pagamento_boleto' => 'getDataCreditoPagamentoBoleto',
        'valor_tarifa' => 'getValorTarifa',
        'valor_outras_despesas_calculadas' => 'getValorOutrasDespesasCalculadas',
        'valor_juros_desconto' => 'getValorJurosDesconto',
        'valor_iof_desconto' => 'getValorIofDesconto',
        'valor_abatimento' => 'getValorAbatimento',
        'valor_desconto' => 'getValorDesconto',
        'valor_recebido' => 'getValorRecebido',
        'valor_juros_mora' => 'getValorJurosMora',
        'valor_outros_valores_recebidos' => 'getValorOutrosValoresRecebidos',
        'valor_abatimento_nao_utilizado' => 'getValorAbatimentoNaoUtilizado',
        'valor_lancamento' => 'getValorLancamento',
        'codigo_forma_pagamento' => 'getCodigoFormaPagamento',
        'codigo_valor_ajuste' => 'getCodigoValorAjuste',
        'valor_ajuste' => 'getValorAjuste',
        'codigo_autorizacao_pagamento_parcial' => 'getCodigoAutorizacaoPagamentoParcial',
        'codigo_canal_pagamento' => 'getCodigoCanalPagamento',
        'url' => 'getUrl',
        'texto_identificador_qr_code' => 'getTextoIdentificadorQrCode',
        'quantidade_dias_calculo' => 'getQuantidadeDiasCalculo',
        'valor_taxa_desconto' => 'getValorTaxaDesconto',
        'valor_taxa_iof' => 'getValorTaxaIof',
        'natureza_recebimento' => 'getNaturezaRecebimento',
        'codigo_tipo_cobranca_comando' => 'getCodigoTipoCobrancaComando',
        'data_liquidacao_boleto' => 'getDataLiquidacaoBoleto'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const CODIGO_COMANDO_ACAO_2 = 2;
    const CODIGO_COMANDO_ACAO_3 = 3;
    const CODIGO_COMANDO_ACAO_5 = 5;
    const CODIGO_COMANDO_ACAO_6 = 6;
    const CODIGO_COMANDO_ACAO_7 = 7;
    const CODIGO_COMANDO_ACAO_8 = 8;
    const CODIGO_COMANDO_ACAO_9 = 9;
    const CODIGO_COMANDO_ACAO_10 = 10;
    const CODIGO_COMANDO_ACAO_11 = 11;
    const CODIGO_COMANDO_ACAO_12 = 12;
    const CODIGO_COMANDO_ACAO_13 = 13;
    const CODIGO_COMANDO_ACAO_14 = 14;
    const TIPO_COBRANCA_1 = 1;
    const TIPO_COBRANCA_2 = 2;
    const TIPO_COBRANCA_4 = 4;
    const TIPO_COBRANCA_7 = 7;
    const TIPO_COBRANCA_8 = 8;
    const CODIGO_ESPECIE_BOLETO_0 = 0;
    const CODIGO_ESPECIE_BOLETO_1 = 1;
    const CODIGO_ESPECIE_BOLETO_2 = 2;
    const CODIGO_ESPECIE_BOLETO_3 = 3;
    const CODIGO_ESPECIE_BOLETO_5 = 5;
    const CODIGO_ESPECIE_BOLETO_8 = 8;
    const CODIGO_ESPECIE_BOLETO_9 = 9;
    const CODIGO_ESPECIE_BOLETO_10 = 10;
    const CODIGO_ESPECIE_BOLETO_12 = 12;
    const CODIGO_ESPECIE_BOLETO_13 = 13;
    const CODIGO_ESPECIE_BOLETO_15 = 15;
    const CODIGO_ESPECIE_BOLETO_25 = 25;
    const CODIGO_ESPECIE_BOLETO_26 = 26;
    const CODIGO_ESPECIE_BOLETO_27 = 27;
    const CODIGO_ESPECIE_BOLETO_31 = 31;
    const CODIGO_ESPECIE_BOLETO_32 = 32;
    const CODIGO_FORMA_PAGAMENTO_0 = 0;
    const CODIGO_FORMA_PAGAMENTO_1 = 1;
    const CODIGO_FORMA_PAGAMENTO_2 = 2;
    const CODIGO_VALOR_AJUSTE_0 = 0;
    const CODIGO_VALOR_AJUSTE_1 = 1;
    const CODIGO_VALOR_AJUSTE_2 = 2;
    const CODIGO_AUTORIZACAO_PAGAMENTO_PARCIAL_1 = 1;
    const CODIGO_AUTORIZACAO_PAGAMENTO_PARCIAL_2 = 2;
    const CODIGO_TIPO_COBRANCA_COMANDO_0 = 0;
    const CODIGO_TIPO_COBRANCA_COMANDO_1 = 1;
    const CODIGO_TIPO_COBRANCA_COMANDO_2 = 2;
    const CODIGO_TIPO_COBRANCA_COMANDO_4 = 4;
    const CODIGO_TIPO_COBRANCA_COMANDO_7 = 7;
    const CODIGO_TIPO_COBRANCA_COMANDO_8 = 8;

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getCodigoComandoAcaoAllowableValues()
    {
        return [
            self::CODIGO_COMANDO_ACAO_2,
            self::CODIGO_COMANDO_ACAO_3,
            self::CODIGO_COMANDO_ACAO_5,
            self::CODIGO_COMANDO_ACAO_6,
            self::CODIGO_COMANDO_ACAO_7,
            self::CODIGO_COMANDO_ACAO_8,
            self::CODIGO_COMANDO_ACAO_9,
            self::CODIGO_COMANDO_ACAO_10,
            self::CODIGO_COMANDO_ACAO_11,
            self::CODIGO_COMANDO_ACAO_12,
            self::CODIGO_COMANDO_ACAO_13,
            self::CODIGO_COMANDO_ACAO_14,
        ];
    }
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTipoCobrancaAllowableValues()
    {
        return [
            self::TIPO_COBRANCA_1,
            self::TIPO_COBRANCA_2,
            self::TIPO_COBRANCA_4,
            self::TIPO_COBRANCA_7,
            self::TIPO_COBRANCA_8,
        ];
    }
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getCodigoEspecieBoletoAllowableValues()
    {
        return [
            self::CODIGO_ESPECIE_BOLETO_0,
            self::CODIGO_ESPECIE_BOLETO_1,
            self::CODIGO_ESPECIE_BOLETO_2,
            self::CODIGO_ESPECIE_BOLETO_3,
            self::CODIGO_ESPECIE_BOLETO_5,
            self::CODIGO_ESPECIE_BOLETO_8,
            self::CODIGO_ESPECIE_BOLETO_9,
            self::CODIGO_ESPECIE_BOLETO_10,
            self::CODIGO_ESPECIE_BOLETO_12,
            self::CODIGO_ESPECIE_BOLETO_13,
            self::CODIGO_ESPECIE_BOLETO_15,
            self::CODIGO_ESPECIE_BOLETO_25,
            self::CODIGO_ESPECIE_BOLETO_26,
            self::CODIGO_ESPECIE_BOLETO_27,
            self::CODIGO_ESPECIE_BOLETO_31,
            self::CODIGO_ESPECIE_BOLETO_32,
        ];
    }
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getCodigoFormaPagamentoAllowableValues()
    {
        return [
            self::CODIGO_FORMA_PAGAMENTO_0,
            self::CODIGO_FORMA_PAGAMENTO_1,
            self::CODIGO_FORMA_PAGAMENTO_2,
        ];
    }
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getCodigoValorAjusteAllowableValues()
    {
        return [
            self::CODIGO_VALOR_AJUSTE_0,
            self::CODIGO_VALOR_AJUSTE_1,
            self::CODIGO_VALOR_AJUSTE_2,
        ];
    }
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getCodigoAutorizacaoPagamentoParcialAllowableValues()
    {
        return [
            self::CODIGO_AUTORIZACAO_PAGAMENTO_PARCIAL_1,
            self::CODIGO_AUTORIZACAO_PAGAMENTO_PARCIAL_2,
        ];
    }
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getCodigoTipoCobrancaComandoAllowableValues()
    {
        return [
            self::CODIGO_TIPO_COBRANCA_COMANDO_0,
            self::CODIGO_TIPO_COBRANCA_COMANDO_1,
            self::CODIGO_TIPO_COBRANCA_COMANDO_2,
            self::CODIGO_TIPO_COBRANCA_COMANDO_4,
            self::CODIGO_TIPO_COBRANCA_COMANDO_7,
            self::CODIGO_TIPO_COBRANCA_COMANDO_8,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['data_movimento_retorno'] = isset($data['data_movimento_retorno']) ? $data['data_movimento_retorno'] : null;
        $this->container['numero_convenio'] = isset($data['numero_convenio']) ? $data['numero_convenio'] : null;
        $this->container['numero_titulo_cobranca'] = isset($data['numero_titulo_cobranca']) ? $data['numero_titulo_cobranca'] : null;
        $this->container['codigo_comando_acao'] = isset($data['codigo_comando_acao']) ? $data['codigo_comando_acao'] : null;
        $this->container['codigo_prefixo_agencia'] = isset($data['codigo_prefixo_agencia']) ? $data['codigo_prefixo_agencia'] : null;
        $this->container['numero_conta_corrente'] = isset($data['numero_conta_corrente']) ? $data['numero_conta_corrente'] : null;
        $this->container['numero_carteira_cobranca'] = isset($data['numero_carteira_cobranca']) ? $data['numero_carteira_cobranca'] : null;
        $this->container['numero_variacao_carteira_cobranca'] = isset($data['numero_variacao_carteira_cobranca']) ? $data['numero_variacao_carteira_cobranca'] : null;
        $this->container['tipo_cobranca'] = isset($data['tipo_cobranca']) ? $data['tipo_cobranca'] : null;
        $this->container['codigo_controle_participante'] = isset($data['codigo_controle_participante']) ? $data['codigo_controle_participante'] : null;
        $this->container['codigo_especie_boleto'] = isset($data['codigo_especie_boleto']) ? $data['codigo_especie_boleto'] : null;
        $this->container['data_vencimento_boleto'] = isset($data['data_vencimento_boleto']) ? $data['data_vencimento_boleto'] : null;
        $this->container['valor_boleto'] = isset($data['valor_boleto']) ? $data['valor_boleto'] : null;
        $this->container['codigo_banco_recebedor'] = isset($data['codigo_banco_recebedor']) ? $data['codigo_banco_recebedor'] : null;
        $this->container['codigo_prefixo_agencia_recebedora'] = isset($data['codigo_prefixo_agencia_recebedora']) ? $data['codigo_prefixo_agencia_recebedora'] : null;
        $this->container['data_credito_pagamento_boleto'] = isset($data['data_credito_pagamento_boleto']) ? $data['data_credito_pagamento_boleto'] : null;
        $this->container['valor_tarifa'] = isset($data['valor_tarifa']) ? $data['valor_tarifa'] : null;
        $this->container['valor_outras_despesas_calculadas'] = isset($data['valor_outras_despesas_calculadas']) ? $data['valor_outras_despesas_calculadas'] : null;
        $this->container['valor_juros_desconto'] = isset($data['valor_juros_desconto']) ? $data['valor_juros_desconto'] : null;
        $this->container['valor_iof_desconto'] = isset($data['valor_iof_desconto']) ? $data['valor_iof_desconto'] : null;
        $this->container['valor_abatimento'] = isset($data['valor_abatimento']) ? $data['valor_abatimento'] : null;
        $this->container['valor_desconto'] = isset($data['valor_desconto']) ? $data['valor_desconto'] : null;
        $this->container['valor_recebido'] = isset($data['valor_recebido']) ? $data['valor_recebido'] : null;
        $this->container['valor_juros_mora'] = isset($data['valor_juros_mora']) ? $data['valor_juros_mora'] : null;
        $this->container['valor_outros_valores_recebidos'] = isset($data['valor_outros_valores_recebidos']) ? $data['valor_outros_valores_recebidos'] : null;
        $this->container['valor_abatimento_nao_utilizado'] = isset($data['valor_abatimento_nao_utilizado']) ? $data['valor_abatimento_nao_utilizado'] : null;
        $this->container['valor_lancamento'] = isset($data['valor_lancamento']) ? $data['valor_lancamento'] : null;
        $this->container['codigo_forma_pagamento'] = isset($data['codigo_forma_pagamento']) ? $data['codigo_forma_pagamento'] : null;
        $this->container['codigo_valor_ajuste'] = isset($data['codigo_valor_ajuste']) ? $data['codigo_valor_ajuste'] : null;
        $this->container['valor_ajuste'] = isset($data['valor_ajuste']) ? $data['valor_ajuste'] : null;
        $this->container['codigo_autorizacao_pagamento_parcial'] = isset($data['codigo_autorizacao_pagamento_parcial']) ? $data['codigo_autorizacao_pagamento_parcial'] : null;
        $this->container['codigo_canal_pagamento'] = isset($data['codigo_canal_pagamento']) ? $data['codigo_canal_pagamento'] : null;
        $this->container['url'] = isset($data['url']) ? $data['url'] : null;
        $this->container['texto_identificador_qr_code'] = isset($data['texto_identificador_qr_code']) ? $data['texto_identificador_qr_code'] : null;
        $this->container['quantidade_dias_calculo'] = isset($data['quantidade_dias_calculo']) ? $data['quantidade_dias_calculo'] : null;
        $this->container['valor_taxa_desconto'] = isset($data['valor_taxa_desconto']) ? $data['valor_taxa_desconto'] : null;
        $this->container['valor_taxa_iof'] = isset($data['valor_taxa_iof']) ? $data['valor_taxa_iof'] : null;
        $this->container['natureza_recebimento'] = isset($data['natureza_recebimento']) ? $data['natureza_recebimento'] : null;
        $this->container['codigo_tipo_cobranca_comando'] = isset($data['codigo_tipo_cobranca_comando']) ? $data['codigo_tipo_cobranca_comando'] : null;
        $this->container['data_liquidacao_boleto'] = isset($data['data_liquidacao_boleto']) ? $data['data_liquidacao_boleto'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getCodigoComandoAcaoAllowableValues();
        if (!is_null($this->container['codigo_comando_acao']) && !in_array($this->container['codigo_comando_acao'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'codigo_comando_acao', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getTipoCobrancaAllowableValues();
        if (!is_null($this->container['tipo_cobranca']) && !in_array($this->container['tipo_cobranca'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'tipo_cobranca', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getCodigoEspecieBoletoAllowableValues();
        if (!is_null($this->container['codigo_especie_boleto']) && !in_array($this->container['codigo_especie_boleto'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'codigo_especie_boleto', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getCodigoFormaPagamentoAllowableValues();
        if (!is_null($this->container['codigo_forma_pagamento']) && !in_array($this->container['codigo_forma_pagamento'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'codigo_forma_pagamento', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getCodigoValorAjusteAllowableValues();
        if (!is_null($this->container['codigo_valor_ajuste']) && !in_array($this->container['codigo_valor_ajuste'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'codigo_valor_ajuste', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getCodigoAutorizacaoPagamentoParcialAllowableValues();
        if (!is_null($this->container['codigo_autorizacao_pagamento_parcial']) && !in_array($this->container['codigo_autorizacao_pagamento_parcial'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'codigo_autorizacao_pagamento_parcial', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getCodigoTipoCobrancaComandoAllowableValues();
        if (!is_null($this->container['codigo_tipo_cobranca_comando']) && !in_array($this->container['codigo_tipo_cobranca_comando'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'codigo_tipo_cobranca_comando', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets data_movimento_retorno
     *
     * @return string
     */
    public function getDataMovimentoRetorno()
    {
        return $this->container['data_movimento_retorno'];
    }

    /**
     * Sets data_movimento_retorno
     *
     * @param string $data_movimento_retorno Data do processamento do movimento de retorno de cobrança de Boleto.
     *
     * @return $this
     */
    public function setDataMovimentoRetorno($data_movimento_retorno)
    {
        $this->container['data_movimento_retorno'] = $data_movimento_retorno;

        return $this;
    }

    /**
     * Gets numero_convenio
     *
     * @return int
     */
    public function getNumeroConvenio()
    {
        return $this->container['numero_convenio'];
    }

    /**
     * Sets numero_convenio
     *
     * @param int $numero_convenio Número do convênio de Cobrança do Cliente
     *
     * @return $this
     */
    public function setNumeroConvenio($numero_convenio)
    {
        $this->container['numero_convenio'] = $numero_convenio;

        return $this;
    }

    /**
     * Gets numero_titulo_cobranca
     *
     * @return string
     */
    public function getNumeroTituloCobranca()
    {
        return $this->container['numero_titulo_cobranca'];
    }

    /**
     * Sets numero_titulo_cobranca
     *
     * @param string $numero_titulo_cobranca Nosso Número
     *
     * @return $this
     */
    public function setNumeroTituloCobranca($numero_titulo_cobranca)
    {
        $this->container['numero_titulo_cobranca'] = $numero_titulo_cobranca;

        return $this;
    }

    /**
     * Gets codigo_comando_acao
     *
     * @return int
     */
    public function getCodigoComandoAcao()
    {
        return $this->container['codigo_comando_acao'];
    }

    /**
     * Sets codigo_comando_acao
     *
     * @param int $codigo_comando_acao Tipo de ação ou comando que o boleto sofre. \"COMANDO 02 - Confirmação de Entrada de Boleto 03 - Comando recusado (Motivo indicado na posição 087/088) 05 - Liquidado sem registro (carteira 17-tipo4) 06 - Liquidação Normal 07 - Liquidação por Conta/Parcial 08 - Liquidação por Saldo 09 - Baixa de Titulo 10 - Baixa Solicitada 11 - Boletos em Ser (constara somente do arquivo de existência de cobrança, fornecido mediante solicitação do cliente) 12 - Abatimento Concedido 13 - Abatimento Cancelado 14 - Alteração de Vencimento do boleto 15 - Liquidação em Cartório 16 - Confirmação de alteração de juros de mora 19 - Confirmação de recebimento de instruções para protesto 20 - Débito em Conta 21 -  Alteração do Nome do Sacado 22 -  Alteração do Endereço do Sacado 23 - Indicação de encaminhamento a cartório 24 - Sustar Protesto 25 - Dispensar Juros de mora 26 - Alteração do número do boleto dado pelo Cedente (Seu número) – 10 e 15 posições 28 - Manutenção de titulo vencido 31 - Conceder desconto 32 - Não conceder desconto 33 - Retificar desconto 34 - Alterar data para desconto 35 - Cobrar Multa 36 - Dispensar Multa 37 - Dispensar Indexador 38 - Dispensar prazo limite para recebimento 39 - Alterar prazo limite para recebimento 41 - Alteração do número do controle do participante (25 posições) 42 - Alteração do número do documento do sacado (CNPJ/CPF) 44 - Boleto pago com cheque devolvido 46 - Boleto pago com cheque, aguardando compensação 61-Registrado QR Code Pix 72- Alteração de tipo de cobrança (específico para boletos das carteiras 11 e 17) 73 - Confirmação de Instrução de Parâmetro de Pagamento Parcial 85 - Inclusão de Negativação 86 - Exclusão de Negativação 93 - Baixa Operacional 96 - Despesas de Protesto 97 - Despesas de Sustação de Protesto 98 - Débito de Custas Antecipadas  Observação: Quando as posições 109-110 apresentarem “06”-Liquidação Normal e as posições 87-88 apresentarem “03”-Liquidação por Saldo ou “11” – Liquidação por Saldo com Cheque a Compensar, significa que o valor residual foi liquidado totalmente.\"
     *
     * @return $this
     */
    public function setCodigoComandoAcao($codigo_comando_acao)
    {
        $allowedValues = $this->getCodigoComandoAcaoAllowableValues();
        if (!is_null($codigo_comando_acao) && !in_array($codigo_comando_acao, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'codigo_comando_acao', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['codigo_comando_acao'] = $codigo_comando_acao;

        return $this;
    }

    /**
     * Gets codigo_prefixo_agencia
     *
     * @return int
     */
    public function getCodigoPrefixoAgencia()
    {
        return $this->container['codigo_prefixo_agencia'];
    }

    /**
     * Sets codigo_prefixo_agencia
     *
     * @param int $codigo_prefixo_agencia Agência do Beneficiário
     *
     * @return $this
     */
    public function setCodigoPrefixoAgencia($codigo_prefixo_agencia)
    {
        $this->container['codigo_prefixo_agencia'] = $codigo_prefixo_agencia;

        return $this;
    }

    /**
     * Gets numero_conta_corrente
     *
     * @return int
     */
    public function getNumeroContaCorrente()
    {
        return $this->container['numero_conta_corrente'];
    }

    /**
     * Sets numero_conta_corrente
     *
     * @param int $numero_conta_corrente Conta Corrente do Beneficiário
     *
     * @return $this
     */
    public function setNumeroContaCorrente($numero_conta_corrente)
    {
        $this->container['numero_conta_corrente'] = $numero_conta_corrente;

        return $this;
    }

    /**
     * Gets numero_carteira_cobranca
     *
     * @return int
     */
    public function getNumeroCarteiraCobranca()
    {
        return $this->container['numero_carteira_cobranca'];
    }

    /**
     * Sets numero_carteira_cobranca
     *
     * @param int $numero_carteira_cobranca Número da carteira do convênio de cobrança
     *
     * @return $this
     */
    public function setNumeroCarteiraCobranca($numero_carteira_cobranca)
    {
        $this->container['numero_carteira_cobranca'] = $numero_carteira_cobranca;

        return $this;
    }

    /**
     * Gets numero_variacao_carteira_cobranca
     *
     * @return int
     */
    public function getNumeroVariacaoCarteiraCobranca()
    {
        return $this->container['numero_variacao_carteira_cobranca'];
    }

    /**
     * Sets numero_variacao_carteira_cobranca
     *
     * @param int $numero_variacao_carteira_cobranca Número da variação da carteira do convênio de cobrança
     *
     * @return $this
     */
    public function setNumeroVariacaoCarteiraCobranca($numero_variacao_carteira_cobranca)
    {
        $this->container['numero_variacao_carteira_cobranca'] = $numero_variacao_carteira_cobranca;

        return $this;
    }

    /**
     * Gets tipo_cobranca
     *
     * @return int
     */
    public function getTipoCobranca()
    {
        return $this->container['tipo_cobranca'];
    }

    /**
     * Sets tipo_cobranca
     *
     * @param int $tipo_cobranca Código para identificar a característica dos boletos dentro das modalidades de cobrança existentes no banco 1 –Simples, 2-Vinculada, 4-Descontada, 7-Cobrança Simples Carteira 17, 8-Vendor
     *
     * @return $this
     */
    public function setTipoCobranca($tipo_cobranca)
    {
        $allowedValues = $this->getTipoCobrancaAllowableValues();
        if (!is_null($tipo_cobranca) && !in_array($tipo_cobranca, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'tipo_cobranca', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['tipo_cobranca'] = $tipo_cobranca;

        return $this;
    }

    /**
     * Gets codigo_controle_participante
     *
     * @return string
     */
    public function getCodigoControleParticipante()
    {
        return $this->container['codigo_controle_participante'];
    }

    /**
     * Sets codigo_controle_participante
     *
     * @param string $codigo_controle_participante \"Número de controle interno definido pelo Beneficiário. Número adotado e controlado pelo Cliente, para identificar o título de cobrança. Para uso do Banco. Seu Número\"
     *
     * @return $this
     */
    public function setCodigoControleParticipante($codigo_controle_participante)
    {
        $this->container['codigo_controle_participante'] = $codigo_controle_participante;

        return $this;
    }

    /**
     * Gets codigo_especie_boleto
     *
     * @return int
     */
    public function getCodigoEspecieBoleto()
    {
        return $this->container['codigo_especie_boleto'];
    }

    /**
     * Sets codigo_especie_boleto
     *
     * @param int $codigo_especie_boleto Código para identificar o tipo de boleto de cobrança (espécie) \"ESPÉCIE DO BOLETO: Esse campo será preenchido somente nas modalidades de Cobrança com Registro (Carteiras 11, 12, 17, 31 e 51) 00 – informado nos registros com comando 97-Despesas de Sustação  de Protesto nas posições 109/110  desde que o titulo não conste  mais da existência  01 – duplicata mercantil  02 – nota promissória  03 – nota de seguro  05 – recibo  08 – letra de câmbio  09 – warrant  10 – cheque  12 – duplicata de serviço  13 – nota de débito  15 – apólice de seguro  25 – dívida ativa da União  26 – dívida ativa de Estado  27 – dívida ativa de Município  31 – Boleto de Cartão de Crédito  32 – Boleto de Proposta  Para carteiras 16 e 18: Preenchido com zeros\"
     *
     * @return $this
     */
    public function setCodigoEspecieBoleto($codigo_especie_boleto)
    {
        $allowedValues = $this->getCodigoEspecieBoletoAllowableValues();
        if (!is_null($codigo_especie_boleto) && !in_array($codigo_especie_boleto, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'codigo_especie_boleto', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['codigo_especie_boleto'] = $codigo_especie_boleto;

        return $this;
    }

    /**
     * Gets data_vencimento_boleto
     *
     * @return string
     */
    public function getDataVencimentoBoleto()
    {
        return $this->container['data_vencimento_boleto'];
    }

    /**
     * Sets data_vencimento_boleto
     *
     * @param string $data_vencimento_boleto Data de vencimento do boleto.
     *
     * @return $this
     */
    public function setDataVencimentoBoleto($data_vencimento_boleto)
    {
        $this->container['data_vencimento_boleto'] = $data_vencimento_boleto;

        return $this;
    }

    /**
     * Gets valor_boleto
     *
     * @return double
     */
    public function getValorBoleto()
    {
        return $this->container['valor_boleto'];
    }

    /**
     * Sets valor_boleto
     *
     * @param double $valor_boleto Valor do boleto no registro
     *
     * @return $this
     */
    public function setValorBoleto($valor_boleto)
    {
        $this->container['valor_boleto'] = $valor_boleto;

        return $this;
    }

    /**
     * Gets codigo_banco_recebedor
     *
     * @return int
     */
    public function getCodigoBancoRecebedor()
    {
        return $this->container['codigo_banco_recebedor'];
    }

    /**
     * Sets codigo_banco_recebedor
     *
     * @param int $codigo_banco_recebedor Código ISPB da Instituição Financeira na qual o boleto foi pago.
     *
     * @return $this
     */
    public function setCodigoBancoRecebedor($codigo_banco_recebedor)
    {
        $this->container['codigo_banco_recebedor'] = $codigo_banco_recebedor;

        return $this;
    }

    /**
     * Gets codigo_prefixo_agencia_recebedora
     *
     * @return int
     */
    public function getCodigoPrefixoAgenciaRecebedora()
    {
        return $this->container['codigo_prefixo_agencia_recebedora'];
    }

    /**
     * Sets codigo_prefixo_agencia_recebedora
     *
     * @param int $codigo_prefixo_agencia_recebedora Código do prefixo identificador de uma dependência da instituição financeira onde o boleto foi pago.
     *
     * @return $this
     */
    public function setCodigoPrefixoAgenciaRecebedora($codigo_prefixo_agencia_recebedora)
    {
        $this->container['codigo_prefixo_agencia_recebedora'] = $codigo_prefixo_agencia_recebedora;

        return $this;
    }

    /**
     * Gets data_credito_pagamento_boleto
     *
     * @return string
     */
    public function getDataCreditoPagamentoBoleto()
    {
        return $this->container['data_credito_pagamento_boleto'];
    }

    /**
     * Sets data_credito_pagamento_boleto
     *
     * @param string $data_credito_pagamento_boleto Data do crédito do pagamento do Boleto
     *
     * @return $this
     */
    public function setDataCreditoPagamentoBoleto($data_credito_pagamento_boleto)
    {
        $this->container['data_credito_pagamento_boleto'] = $data_credito_pagamento_boleto;

        return $this;
    }

    /**
     * Gets valor_tarifa
     *
     * @return double
     */
    public function getValorTarifa()
    {
        return $this->container['valor_tarifa'];
    }

    /**
     * Sets valor_tarifa
     *
     * @param double $valor_tarifa Valor que o Cliente é debitado da tarifa por realizar um determinado ação
     *
     * @return $this
     */
    public function setValorTarifa($valor_tarifa)
    {
        $this->container['valor_tarifa'] = $valor_tarifa;

        return $this;
    }

    /**
     * Gets valor_outras_despesas_calculadas
     *
     * @return double
     */
    public function getValorOutrasDespesasCalculadas()
    {
        return $this->container['valor_outras_despesas_calculadas'];
    }

    /**
     * Sets valor_outras_despesas_calculadas
     *
     * @param double $valor_outras_despesas_calculadas Despesas calculadas conforme o comando determinado pelo Cliente.
     *
     * @return $this
     */
    public function setValorOutrasDespesasCalculadas($valor_outras_despesas_calculadas)
    {
        $this->container['valor_outras_despesas_calculadas'] = $valor_outras_despesas_calculadas;

        return $this;
    }

    /**
     * Gets valor_juros_desconto
     *
     * @return double
     */
    public function getValorJurosDesconto()
    {
        return $this->container['valor_juros_desconto'];
    }

    /**
     * Sets valor_juros_desconto
     *
     * @param double $valor_juros_desconto Valor de juros calculados apenas para boletos da modalidade do tipo de cobrança desconto.
     *
     * @return $this
     */
    public function setValorJurosDesconto($valor_juros_desconto)
    {
        $this->container['valor_juros_desconto'] = $valor_juros_desconto;

        return $this;
    }

    /**
     * Gets valor_iof_desconto
     *
     * @return double
     */
    public function getValorIofDesconto()
    {
        return $this->container['valor_iof_desconto'];
    }

    /**
     * Sets valor_iof_desconto
     *
     * @param double $valor_iof_desconto Valor do IOF incidente sobre o valor do desconto.
     *
     * @return $this
     */
    public function setValorIofDesconto($valor_iof_desconto)
    {
        $this->container['valor_iof_desconto'] = $valor_iof_desconto;

        return $this;
    }

    /**
     * Gets valor_abatimento
     *
     * @return double
     */
    public function getValorAbatimento()
    {
        return $this->container['valor_abatimento'];
    }

    /**
     * Sets valor_abatimento
     *
     * @param double $valor_abatimento Valor do abatimento concedido sobre o valor do título.
     *
     * @return $this
     */
    public function setValorAbatimento($valor_abatimento)
    {
        $this->container['valor_abatimento'] = $valor_abatimento;

        return $this;
    }

    /**
     * Gets valor_desconto
     *
     * @return double
     */
    public function getValorDesconto()
    {
        return $this->container['valor_desconto'];
    }

    /**
     * Sets valor_desconto
     *
     * @param double $valor_desconto Valor do desconto concedido sobre o valor do título.
     *
     * @return $this
     */
    public function setValorDesconto($valor_desconto)
    {
        $this->container['valor_desconto'] = $valor_desconto;

        return $this;
    }

    /**
     * Gets valor_recebido
     *
     * @return double
     */
    public function getValorRecebido()
    {
        return $this->container['valor_recebido'];
    }

    /**
     * Sets valor_recebido
     *
     * @param double $valor_recebido Valor do recebido pelo título de cobrança do boleto.
     *
     * @return $this
     */
    public function setValorRecebido($valor_recebido)
    {
        $this->container['valor_recebido'] = $valor_recebido;

        return $this;
    }

    /**
     * Gets valor_juros_mora
     *
     * @return double
     */
    public function getValorJurosMora()
    {
        return $this->container['valor_juros_mora'];
    }

    /**
     * Sets valor_juros_mora
     *
     * @param double $valor_juros_mora Valor dos juros de mora cobrados pelo atraso no pagamento do título.
     *
     * @return $this
     */
    public function setValorJurosMora($valor_juros_mora)
    {
        $this->container['valor_juros_mora'] = $valor_juros_mora;

        return $this;
    }

    /**
     * Gets valor_outros_valores_recebidos
     *
     * @return double
     */
    public function getValorOutrosValoresRecebidos()
    {
        return $this->container['valor_outros_valores_recebidos'];
    }

    /**
     * Sets valor_outros_valores_recebidos
     *
     * @param double $valor_outros_valores_recebidos Outros valores recebidos no momento do pagamento do Boleto (título).
     *
     * @return $this
     */
    public function setValorOutrosValoresRecebidos($valor_outros_valores_recebidos)
    {
        $this->container['valor_outros_valores_recebidos'] = $valor_outros_valores_recebidos;

        return $this;
    }

    /**
     * Gets valor_abatimento_nao_utilizado
     *
     * @return double
     */
    public function getValorAbatimentoNaoUtilizado()
    {
        return $this->container['valor_abatimento_nao_utilizado'];
    }

    /**
     * Sets valor_abatimento_nao_utilizado
     *
     * @param double $valor_abatimento_nao_utilizado Valor de abatimento ao qual o clente tem direito mas que não foi utilizado por ele (para comando 311 - liquidação).
     *
     * @return $this
     */
    public function setValorAbatimentoNaoUtilizado($valor_abatimento_nao_utilizado)
    {
        $this->container['valor_abatimento_nao_utilizado'] = $valor_abatimento_nao_utilizado;

        return $this;
    }

    /**
     * Gets valor_lancamento
     *
     * @return double
     */
    public function getValorLancamento()
    {
        return $this->container['valor_lancamento'];
    }

    /**
     * Sets valor_lancamento
     *
     * @param double $valor_lancamento Valor de lançamento calculado com base no valor pago, descontos e abatimentos.
     *
     * @return $this
     */
    public function setValorLancamento($valor_lancamento)
    {
        $this->container['valor_lancamento'] = $valor_lancamento;

        return $this;
    }

    /**
     * Gets codigo_forma_pagamento
     *
     * @return int
     */
    public function getCodigoFormaPagamento()
    {
        return $this->container['codigo_forma_pagamento'];
    }

    /**
     * Sets codigo_forma_pagamento
     *
     * @param int $codigo_forma_pagamento Indica a forma de pagamento do Boleto (título) de cobrança. 0-sem lançamento, 1-débito, 2-crédito
     *
     * @return $this
     */
    public function setCodigoFormaPagamento($codigo_forma_pagamento)
    {
        $allowedValues = $this->getCodigoFormaPagamentoAllowableValues();
        if (!is_null($codigo_forma_pagamento) && !in_array($codigo_forma_pagamento, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'codigo_forma_pagamento', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['codigo_forma_pagamento'] = $codigo_forma_pagamento;

        return $this;
    }

    /**
     * Gets codigo_valor_ajuste
     *
     * @return int
     */
    public function getCodigoValorAjuste()
    {
        return $this->container['codigo_valor_ajuste'];
    }

    /**
     * Sets codigo_valor_ajuste
     *
     * @param int $codigo_valor_ajuste Indica se ocorreu um ajuste a débito ou a crédito do Boleto. 0-sem ajuste, 1-ajuste de valor a débito, 2-ajuste de valor a crédito
     *
     * @return $this
     */
    public function setCodigoValorAjuste($codigo_valor_ajuste)
    {
        $allowedValues = $this->getCodigoValorAjusteAllowableValues();
        if (!is_null($codigo_valor_ajuste) && !in_array($codigo_valor_ajuste, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'codigo_valor_ajuste', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['codigo_valor_ajuste'] = $codigo_valor_ajuste;

        return $this;
    }

    /**
     * Gets valor_ajuste
     *
     * @return double
     */
    public function getValorAjuste()
    {
        return $this->container['valor_ajuste'];
    }

    /**
     * Sets valor_ajuste
     *
     * @param double $valor_ajuste Para tipo de cobrança descontada, nos comandos de liquidação ou baixa de boleto, quando o Indicador de Valor é igual a 1 e houver valor a débito ou Indicador de valor igual a 2 é preenchido com o valor do ajuste.
     *
     * @return $this
     */
    public function setValorAjuste($valor_ajuste)
    {
        $this->container['valor_ajuste'] = $valor_ajuste;

        return $this;
    }

    /**
     * Gets codigo_autorizacao_pagamento_parcial
     *
     * @return int
     */
    public function getCodigoAutorizacaoPagamentoParcial()
    {
        return $this->container['codigo_autorizacao_pagamento_parcial'];
    }

    /**
     * Sets codigo_autorizacao_pagamento_parcial
     *
     * @param int $codigo_autorizacao_pagamento_parcial Indica se o boleto pode ser pago parcialmente ou não. 1 - Não aceita receber pagamento parcial de boletos, 2-Aceita receber pagamento parcial de boletos
     *
     * @return $this
     */
    public function setCodigoAutorizacaoPagamentoParcial($codigo_autorizacao_pagamento_parcial)
    {
        $allowedValues = $this->getCodigoAutorizacaoPagamentoParcialAllowableValues();
        if (!is_null($codigo_autorizacao_pagamento_parcial) && !in_array($codigo_autorizacao_pagamento_parcial, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'codigo_autorizacao_pagamento_parcial', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['codigo_autorizacao_pagamento_parcial'] = $codigo_autorizacao_pagamento_parcial;

        return $this;
    }

    /**
     * Gets codigo_canal_pagamento
     *
     * @return int
     */
    public function getCodigoCanalPagamento()
    {
        return $this->container['codigo_canal_pagamento'];
    }

    /**
     * Sets codigo_canal_pagamento
     *
     * @param int $codigo_canal_pagamento Número do canal de pagamento do Boleto que identifica qual o meio utilizado para realizar o pagamento. \"CANAL UTILIZADO PARA PAGAMENTO/MEIOS DE APRESENTAÇÃO DO BOLETO AO SACADO: Comando 02 nas posições 109/110 (Confirmação de entrada de boleto – Nota 07) 00 – Não é Sacado Eletrônico no DDA 50 – Sacado eletrônico no DDA  Comando 06, 07, 08, 15 ou 46 nas posições 109/110 (Liquidação de boleto – Nota 07) 01  –  terminal de auto-atendimento 02  –  internet 03  –  central de atendimento (URA) 04  –  gerenciador financeiro 05  –  central de atendimento 06  –  outro canal de auto-atendimento 07  –  correspondente bancário 08  –  guichê de caixa 09  –  arquivo-eletrônico 10  –  compensação 11  –  outro canal eletrônico 61 - Pix  Comando 93 nas posições 109/110 (Baixa Operacional – Nota 07) 01 - Liquidação Caixa 02 - Liquidação TAA 03 - Liquidação Internet 05 - Liquidação Correspondente Bancário 06 - Liquidação Central de Atendimento 07 - Liquidação Arquivo 08 - Liquidação Internet\"
     *
     * @return $this
     */
    public function setCodigoCanalPagamento($codigo_canal_pagamento)
    {
        $this->container['codigo_canal_pagamento'] = $codigo_canal_pagamento;

        return $this;
    }

    /**
     * Gets url
     *
     * @return string
     */
    public function getUrl()
    {
        return $this->container['url'];
    }

    /**
     * Sets url
     *
     * @param string $url Link do  QRCode gerado na iniciação de um pagamento de título de cobrança vinculado ao sistema de pagamento instantâneo, que conterá as demais informações constantes no QRCODE para que os dados sejam apresentados para o pagador.
     *
     * @return $this
     */
    public function setUrl($url)
    {
        $this->container['url'] = $url;

        return $this;
    }

    /**
     * Gets texto_identificador_qr_code
     *
     * @return string
     */
    public function getTextoIdentificadorQrCode()
    {
        return $this->container['texto_identificador_qr_code'];
    }

    /**
     * Sets texto_identificador_qr_code
     *
     * @param string $texto_identificador_qr_code Código que identifica a transação que vincula o QRCode disponibilizado para pagamento do título de cobrança vinculado ao sistema de pagamento instantâneo.
     *
     * @return $this
     */
    public function setTextoIdentificadorQrCode($texto_identificador_qr_code)
    {
        $this->container['texto_identificador_qr_code'] = $texto_identificador_qr_code;

        return $this;
    }

    /**
     * Gets quantidade_dias_calculo
     *
     * @return int
     */
    public function getQuantidadeDiasCalculo()
    {
        return $this->container['quantidade_dias_calculo'];
    }

    /**
     * Sets quantidade_dias_calculo
     *
     * @param int $quantidade_dias_calculo Quantidade de dias para calculo do boleto de cobrança. a) Carteiras 11, 12, 15, 16, 7, 18 e 31: quando o boleto for liquidado, é preenchido com o número de dias decorridos desde o vencimento até a liquidação. b) Carteira 51: igual ao número de dias sobre os quais foram calculados o desconto e o IOF.
     *
     * @return $this
     */
    public function setQuantidadeDiasCalculo($quantidade_dias_calculo)
    {
        $this->container['quantidade_dias_calculo'] = $quantidade_dias_calculo;

        return $this;
    }

    /**
     * Gets valor_taxa_desconto
     *
     * @return double
     */
    public function getValorTaxaDesconto()
    {
        return $this->container['valor_taxa_desconto'];
    }

    /**
     * Sets valor_taxa_desconto
     *
     * @param double $valor_taxa_desconto Valor da taxa de desconto aplicada ao boleto de cobrança.
     *
     * @return $this
     */
    public function setValorTaxaDesconto($valor_taxa_desconto)
    {
        $this->container['valor_taxa_desconto'] = $valor_taxa_desconto;

        return $this;
    }

    /**
     * Gets valor_taxa_iof
     *
     * @return double
     */
    public function getValorTaxaIof()
    {
        return $this->container['valor_taxa_iof'];
    }

    /**
     * Sets valor_taxa_iof
     *
     * @param double $valor_taxa_iof Valor da taxa de IOF calculado ao boleto de cobrança.
     *
     * @return $this
     */
    public function setValorTaxaIof($valor_taxa_iof)
    {
        $this->container['valor_taxa_iof'] = $valor_taxa_iof;

        return $this;
    }

    /**
     * Gets natureza_recebimento
     *
     * @return int
     */
    public function getNaturezaRecebimento()
    {
        return $this->container['natureza_recebimento'];
    }

    /**
     * Sets natureza_recebimento
     *
     * @param int $natureza_recebimento A natureza do Recebimento é o número de validação do ciclo de vida do boleto,  que vai  variar de acordo com o comando. \"NATUREZA DO RECEBIMENTO a) comando 05, 06, 07, 08 ou 15 ou 46 nas posições 109/110 01-liquidação normal 02-liquidação parcial 03-liquidação por saldo 04-liquidação com cheque a compensar 05-liquidação de boleto sem registro (carteira 7 tipo 4) 07-liquidação na apresentação 09-liquidação em cartório 10-Liquidação Parcial com Cheque a Compensar 11-Liquidação por Saldo com Cheque a Compensar 61-Liquidação via Pix  b) comando 02 nas posições 109/110 (ENTRADA): 00-por meio magnético 11-por via convencional 16-por alteração do código do cedente 17-por alteração da variação 18-por alteração da carteira c) comandos 09, 10 ou 20 nas posições 109/110 (BAIXA): 00-solicitada pelo cliente 15-protestado 18-por alteração da carteira 19-débito automático 31-liquidado anteriormente 32-habilitado em processo 33-incobrável por nosso intermédio 34-transferido para créditos em liquidação 46-por alteração da variação 47-por alteração da variação 51-acerto 61-Registrado com QR Code Pix 62-Registrado sem QR Code Pix 90-baixa automática  d) comando 03 nas posições 109/110 (RECUSA): 01-identificação inválida 02-variação da carteira inválida 03-valor dos juros por um dia inválido 04-valor do desconto inválido 05-espécie de boleto inválida para carteira/variação 06-espécie de valor invariável inválido 07-prefixo da agência usuária inválido 08-valor do boleto/apólice inválido 09-data de vencimento inválida 10-fora do prazo/só admissível na carteira  11-inexistência de margem para desconto 12-o banco não tem agência na praça do sacado 13-razões cadastrais 14-sacado interligado com o sacador (só admissível em cobrança simples- cart. 11 e 17) 15-Titulo sacado contra órgão do Poder Público (só admissível na carteira 11 e sem ordem de protesto) 16-Titulo preenchido de forma irregular  17-Titulo rasurado 18-Endereço do sacado não localizado ou incompleto  19-Código do cedente inválido  20-Nome/endereço do cliente não informado (ECT) 21-Carteira inválida 22-Quantidade de valor variável inválida 23-Faixa nosso-numero excedida 24-Valor do abatimento inválido 25-Novo número do boleto dado pelo cedente inválido (Seu número) 26-Valor do IOF de seguro inválido 27-Nome do sacado/cedente inválido 28-Data do novo vencimento inválida 29-Endereço não informado 30-Registro de boleto já liquidado (carteira 17-tipo 4) 31-Numero do borderô inválido 32-Nome da pessoa autorizada inválido 33-Nosso número já existente 34-Numero da prestação do contrato inválido 35-percentual de desconto inválido 36-Dias para fichamento de protesto inválido 37-Data de emissão do boleto inválida 38-Data do vencimento anterior à data da emissão do boleto 39-Comando de alteração indevido para a carteira 40-Tipo de moeda inválido 41-Abatimento não permitido 42-CEP/UF inválido/não compatíveis (ECT) 43-Código de unidade variável incompatível com a data de emissão do boleto 44-Dados para débito ao sacado inválidos 45-Carteira/variação encerrada 46-Convenio encerrado 47-Titulo tem valor diverso do informado 48-Motivo de baixa invalido para a carteira 49-Abatimento a cancelar não consta do boleto 50-Comando incompatível com a carteira 51-Código do convenente invalido 52-Abatimento igual ou maior que o valor do titulo 53-Titulo já se encontra na situação pretendida 54-Titulo fora do prazo admitido para a conta 1 55-Novo vencimento fora dos limites da carteira 56-Titulo não pertence ao convenente 57-Variação incompatível com a carteira 58-Impossível a variação única para a carteira indicada  59-Titulo vencido em transferência para a carteira 51 60-Titulo com prazo superior a 179 dias em variação única para carteira 51 61-Titulo já foi fichado para protesto 62-Alteração da situação de débito inválida para o código de responsabilidade 63-DV do nosso número inválido 64-Titulo não passível de débito/baixa – situação anormal 65-Titulo com ordem de não protestar – não pode ser encaminhado a cartório 66-Número do documento do sacado (CNPJ/CPF) inválido 67-Titulo/carne rejeitado 69-Valor/Percentual de Juros Inválido 70-Boleto já se encontra isento de juros 71-Código de Juros Inválido 72 - Prefixo da Ag. cobradora inválido 73 – Numero do controle do participante inválido 74 – Cliente não cadastrado no CIOPE (Desconto/Vendor) 75 – Qtde. de dias do prazo limite p/ recebimento de boleto vencido inválido 76 – Titulo excluído automaticamente por decurso de prazo CIOPE (Desconto/Vendor) 77 – Titulo vencido transferido para a conta 1 – Carteira vinculada 84 – Boleto não localizado na existência/Baixado por protesto 80-Nosso numero inválido 81-Data para concessão do desconto inválida. Gerada nos seguintes casos: 11  - erro na data do desconto; 12  - data do desconto anterior à data de emissão 82-CEP do sacado inválido 83-Carteira/variação não localizada no cedente 84-Titulo não localizado na existência 85-Recusa do Comando “41” – Parâmetro de Liquidação Parcial. 99-Outros motivos  Comando 72 nas posições 109/110 (Alteração de Tipo de Cobrança): 00-transferência de boleto de cobrança simples para descontada ou vice-versa 52-reembolso de boleto vendor ou descontado, quando ocorrerem reembolsos de boletos por falta de liquidação. Não há migração de carteira descontada para simples.  Comando 85 nas posições 109/110: 01 - Negativação aceita no BB                                      02 - Negativação aceita no agente negativador                      03 - Inclusão cancelada                                           04 - Negativação recusada - pagador menor de idade                 05 - Negativação recusada - espécie do boleto não permitida        06 - Negativação recusada - beneficiário não é PJ                  07 - Negativação recusada - moeda do boleto não é Real             08 - Negativação recusada - endereço do pagador inválido           09 - Negativação recusada pelo agente negativador 10 - Negativação recusada - situação do boleto não permite NGTV    11 - Negativação recusada - cadastro do benef. desatualizado        12 - Negativação recusada - boleto inexistente                     13 - Negativação recusada - pagador não identificado               14 - Recusa de tarifação de negativação 15 - Negativação recusada - motivos diversos  Comando 86 nas posições 109/110: 01 - Exclusão cancelada                          02 - Negativação excluída no agente negativador                    03 - Negativação excluída - devolução pelos correios               04 - Negativação excluída - data de ocorrência decursada           05 - Negativação excluída - determinação judicial                  06 - Negativação excluída - contestação do interessado             07 - Negativação excluída - carta não retornou do correio          08 - Exclusão negativação recusada - registro inexistente 09 - Exclusão de negativação aceita no BB 15 - Exclusão negativação recusada - motivos diversos      Comando 93 nas posições 109/110: 01 - Baixa Operacional BB                          02 - Baixa Operacional Outros Bancos 10 - Cancelamento de Baixa Operacional\"
     *
     * @return $this
     */
    public function setNaturezaRecebimento($natureza_recebimento)
    {
        $this->container['natureza_recebimento'] = $natureza_recebimento;

        return $this;
    }

    /**
     * Gets codigo_tipo_cobranca_comando
     *
     * @return int
     */
    public function getCodigoTipoCobrancaComando()
    {
        return $this->container['codigo_tipo_cobranca_comando'];
    }

    /**
     * Sets codigo_tipo_cobranca_comando
     *
     * @param int $codigo_tipo_cobranca_comando Código do tipo de cobrança original. O objetivo é preservar o tipo de cobrança original. 0-Caso não haja alteração de tipo de cobrança, 1-Simples, 2-Vinculada, 4-Descontada, 7-Cobrança Simples Carteira 17, 8-Vendor
     *
     * @return $this
     */
    public function setCodigoTipoCobrancaComando($codigo_tipo_cobranca_comando)
    {
        $allowedValues = $this->getCodigoTipoCobrancaComandoAllowableValues();
        if (!is_null($codigo_tipo_cobranca_comando) && !in_array($codigo_tipo_cobranca_comando, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'codigo_tipo_cobranca_comando', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['codigo_tipo_cobranca_comando'] = $codigo_tipo_cobranca_comando;

        return $this;
    }

    /**
     * Gets data_liquidacao_boleto
     *
     * @return string
     */
    public function getDataLiquidacaoBoleto()
    {
        return $this->container['data_liquidacao_boleto'];
    }

    /**
     * Sets data_liquidacao_boleto
     *
     * @param string $data_liquidacao_boleto Data de liquidação do boleto.
     *
     * @return $this
     */
    public function setDataLiquidacaoBoleto($data_liquidacao_boleto)
    {
        $this->container['data_liquidacao_boleto'] = $data_liquidacao_boleto;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
