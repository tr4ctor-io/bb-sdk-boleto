<?php
/**
 * RespostaListaBoletosBoletos
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Cobranças API
 *
 * API para gerenciar os serviços de cobranças de cliente do Banco do Brasil S.A.
 *
 * OpenAPI spec version: 2.17.3
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.57
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * RespostaListaBoletosBoletos Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class RespostaListaBoletosBoletos implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'RespostaListaBoletos_boletos';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'numero_boleto_bb' => 'string',
        'estado_titulo_cobranca' => 'string',
        'data_registro' => 'string',
        'data_vencimento' => 'string',
        'data_movimento' => 'string',
        'valor_original' => 'float',
        'valor_atual' => 'float',
        'valor_pago' => 'float',
        'contrato' => 'int',
        'carteira_convenio' => 'int',
        'variacao_carteira_convenio' => 'int',
        'codigo_estado_titulo_cobranca' => 'int',
        'data_credito' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'numero_boleto_bb' => null,
        'estado_titulo_cobranca' => null,
        'data_registro' => null,
        'data_vencimento' => null,
        'data_movimento' => null,
        'valor_original' => 'float',
        'valor_atual' => 'float',
        'valor_pago' => 'float',
        'contrato' => 'int32',
        'carteira_convenio' => 'int32',
        'variacao_carteira_convenio' => 'int32',
        'codigo_estado_titulo_cobranca' => 'int32',
        'data_credito' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'numero_boleto_bb' => 'numeroBoletoBB',
        'estado_titulo_cobranca' => 'estadoTituloCobranca',
        'data_registro' => 'dataRegistro',
        'data_vencimento' => 'dataVencimento',
        'data_movimento' => 'dataMovimento',
        'valor_original' => 'valorOriginal',
        'valor_atual' => 'valorAtual',
        'valor_pago' => 'valorPago',
        'contrato' => 'contrato',
        'carteira_convenio' => 'carteiraConvenio',
        'variacao_carteira_convenio' => 'variacaoCarteiraConvenio',
        'codigo_estado_titulo_cobranca' => 'codigoEstadoTituloCobranca',
        'data_credito' => 'dataCredito'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'numero_boleto_bb' => 'setNumeroBoletoBb',
        'estado_titulo_cobranca' => 'setEstadoTituloCobranca',
        'data_registro' => 'setDataRegistro',
        'data_vencimento' => 'setDataVencimento',
        'data_movimento' => 'setDataMovimento',
        'valor_original' => 'setValorOriginal',
        'valor_atual' => 'setValorAtual',
        'valor_pago' => 'setValorPago',
        'contrato' => 'setContrato',
        'carteira_convenio' => 'setCarteiraConvenio',
        'variacao_carteira_convenio' => 'setVariacaoCarteiraConvenio',
        'codigo_estado_titulo_cobranca' => 'setCodigoEstadoTituloCobranca',
        'data_credito' => 'setDataCredito'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'numero_boleto_bb' => 'getNumeroBoletoBb',
        'estado_titulo_cobranca' => 'getEstadoTituloCobranca',
        'data_registro' => 'getDataRegistro',
        'data_vencimento' => 'getDataVencimento',
        'data_movimento' => 'getDataMovimento',
        'valor_original' => 'getValorOriginal',
        'valor_atual' => 'getValorAtual',
        'valor_pago' => 'getValorPago',
        'contrato' => 'getContrato',
        'carteira_convenio' => 'getCarteiraConvenio',
        'variacao_carteira_convenio' => 'getVariacaoCarteiraConvenio',
        'codigo_estado_titulo_cobranca' => 'getCodigoEstadoTituloCobranca',
        'data_credito' => 'getDataCredito'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }



    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['numero_boleto_bb'] = isset($data['numero_boleto_bb']) ? $data['numero_boleto_bb'] : null;
        $this->container['estado_titulo_cobranca'] = isset($data['estado_titulo_cobranca']) ? $data['estado_titulo_cobranca'] : null;
        $this->container['data_registro'] = isset($data['data_registro']) ? $data['data_registro'] : null;
        $this->container['data_vencimento'] = isset($data['data_vencimento']) ? $data['data_vencimento'] : null;
        $this->container['data_movimento'] = isset($data['data_movimento']) ? $data['data_movimento'] : null;
        $this->container['valor_original'] = isset($data['valor_original']) ? $data['valor_original'] : null;
        $this->container['valor_atual'] = isset($data['valor_atual']) ? $data['valor_atual'] : null;
        $this->container['valor_pago'] = isset($data['valor_pago']) ? $data['valor_pago'] : null;
        $this->container['contrato'] = isset($data['contrato']) ? $data['contrato'] : null;
        $this->container['carteira_convenio'] = isset($data['carteira_convenio']) ? $data['carteira_convenio'] : null;
        $this->container['variacao_carteira_convenio'] = isset($data['variacao_carteira_convenio']) ? $data['variacao_carteira_convenio'] : null;
        $this->container['codigo_estado_titulo_cobranca'] = isset($data['codigo_estado_titulo_cobranca']) ? $data['codigo_estado_titulo_cobranca'] : null;
        $this->container['data_credito'] = isset($data['data_credito']) ? $data['data_credito'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets numero_boleto_bb
     *
     * @return string
     */
    public function getNumeroBoletoBb()
    {
        return $this->container['numero_boleto_bb'];
    }

    /**
     * Sets numero_boleto_bb
     *
     * @param string $numero_boleto_bb Número de identificação do boleto (correspondente ao NOSSO NÚMERO), no formato STRING, com 20 dígitos. Corresponde aos campos numeroTituloCliente (requisição do registro do boleto), numero (resposta do registro) e id (detalhamento do boleto).
     *
     * @return $this
     */
    public function setNumeroBoletoBb($numero_boleto_bb)
    {
        $this->container['numero_boleto_bb'] = $numero_boleto_bb;

        return $this;
    }

    /**
     * Gets estado_titulo_cobranca
     *
     * @return string
     */
    public function getEstadoTituloCobranca()
    {
        return $this->container['estado_titulo_cobranca'];
    }

    /**
     * Sets estado_titulo_cobranca
     *
     * @param string $estado_titulo_cobranca Texto da situação atual do boleto.  Possíveis valores de retorno: - NORMAL   - MOVIMENTO CARTORIO - EM CARTORIO - TITULO COM OCORRENCIA DE CARTORIO - PROTESTADO ELETRONICO  - LIQUIDADO    - BAIXADO  - TITULO COM PENDENCIA DE CARTORIO  - TITULO PROTESTADO MANUAL
     *
     * @return $this
     */
    public function setEstadoTituloCobranca($estado_titulo_cobranca)
    {
        $this->container['estado_titulo_cobranca'] = $estado_titulo_cobranca;

        return $this;
    }

    /**
     * Gets data_registro
     *
     * @return string
     */
    public function getDataRegistro()
    {
        return $this->container['data_registro'];
    }

    /**
     * Sets data_registro
     *
     * @param string $data_registro Data de registro do boleto.
     *
     * @return $this
     */
    public function setDataRegistro($data_registro)
    {
        $this->container['data_registro'] = $data_registro;

        return $this;
    }

    /**
     * Gets data_vencimento
     *
     * @return string
     */
    public function getDataVencimento()
    {
        return $this->container['data_vencimento'];
    }

    /**
     * Sets data_vencimento
     *
     * @param string $data_vencimento Data de vencimento do boleto
     *
     * @return $this
     */
    public function setDataVencimento($data_vencimento)
    {
        $this->container['data_vencimento'] = $data_vencimento;

        return $this;
    }

    /**
     * Gets data_movimento
     *
     * @return string
     */
    public function getDataMovimento()
    {
        return $this->container['data_movimento'];
    }

    /**
     * Sets data_movimento
     *
     * @param string $data_movimento Data do evento que baixou, protestou ou liquidou o boleto. No caso de títulos vigentes, ainda que vencidos, equivale a data de registro.
     *
     * @return $this
     */
    public function setDataMovimento($data_movimento)
    {
        $this->container['data_movimento'] = $data_movimento;

        return $this;
    }

    /**
     * Gets valor_original
     *
     * @return float
     */
    public function getValorOriginal()
    {
        return $this->container['valor_original'];
    }

    /**
     * Sets valor_original
     *
     * @param float $valor_original Valor do boleto no registro.
     *
     * @return $this
     */
    public function setValorOriginal($valor_original)
    {
        $this->container['valor_original'] = $valor_original;

        return $this;
    }

    /**
     * Gets valor_atual
     *
     * @return float
     */
    public function getValorAtual()
    {
        return $this->container['valor_atual'];
    }

    /**
     * Sets valor_atual
     *
     * @param float $valor_atual Valor atualizado do boleto.
     *
     * @return $this
     */
    public function setValorAtual($valor_atual)
    {
        $this->container['valor_atual'] = $valor_atual;

        return $this;
    }

    /**
     * Gets valor_pago
     *
     * @return float
     */
    public function getValorPago()
    {
        return $this->container['valor_pago'];
    }

    /**
     * Sets valor_pago
     *
     * @param float $valor_pago Valor pago pelo pagador/sacado.
     *
     * @return $this
     */
    public function setValorPago($valor_pago)
    {
        $this->container['valor_pago'] = $valor_pago;

        return $this;
    }

    /**
     * Gets contrato
     *
     * @return int
     */
    public function getContrato()
    {
        return $this->container['contrato'];
    }

    /**
     * Sets contrato
     *
     * @param int $contrato Código do contrato entre o Banco do Brasil e a empresa cliente.
     *
     * @return $this
     */
    public function setContrato($contrato)
    {
        $this->container['contrato'] = $contrato;

        return $this;
    }

    /**
     * Gets carteira_convenio
     *
     * @return int
     */
    public function getCarteiraConvenio()
    {
        return $this->container['carteira_convenio'];
    }

    /**
     * Sets carteira_convenio
     *
     * @param int $carteira_convenio Número da carteira do convênio de cobrança.
     *
     * @return $this
     */
    public function setCarteiraConvenio($carteira_convenio)
    {
        $this->container['carteira_convenio'] = $carteira_convenio;

        return $this;
    }

    /**
     * Gets variacao_carteira_convenio
     *
     * @return int
     */
    public function getVariacaoCarteiraConvenio()
    {
        return $this->container['variacao_carteira_convenio'];
    }

    /**
     * Sets variacao_carteira_convenio
     *
     * @param int $variacao_carteira_convenio Número da variação da carteira do convênio de cobrança.
     *
     * @return $this
     */
    public function setVariacaoCarteiraConvenio($variacao_carteira_convenio)
    {
        $this->container['variacao_carteira_convenio'] = $variacao_carteira_convenio;

        return $this;
    }

    /**
     * Gets codigo_estado_titulo_cobranca
     *
     * @return int
     */
    public function getCodigoEstadoTituloCobranca()
    {
        return $this->container['codigo_estado_titulo_cobranca'];
    }

    /**
     * Sets codigo_estado_titulo_cobranca
     *
     * @param int $codigo_estado_titulo_cobranca Código da situação atual do boleto:  Domínios: 01 - NORMAL   02 - MOVIMENTO CARTORIO 03 - EM CARTORIO 04 - TITULO COM OCORRENCIA DE CARTORIO 05 - PROTESTADO ELETRONICO  06 - LIQUIDADO    07 - BAIXADO  08 - TITULO COM PENDENCIA DE CARTORIO  09 - TITULO PROTESTADO MANUAL
     *
     * @return $this
     */
    public function setCodigoEstadoTituloCobranca($codigo_estado_titulo_cobranca)
    {
        $this->container['codigo_estado_titulo_cobranca'] = $codigo_estado_titulo_cobranca;

        return $this;
    }

    /**
     * Gets data_credito
     *
     * @return string
     */
    public function getDataCredito()
    {
        return $this->container['data_credito'];
    }

    /**
     * Sets data_credito
     *
     * @param string $data_credito Data do crédito dos valores ao beneficiário
     *
     * @return $this
     */
    public function setDataCredito($data_credito)
    {
        $this->container['data_credito'] = $data_credito;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
