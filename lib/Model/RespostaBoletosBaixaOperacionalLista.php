<?php
/**
 * RespostaBoletosBaixaOperacionalLista
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Cobranças API
 *
 * API para gerenciar os serviços de cobranças de cliente do Banco do Brasil S.A.
 *
 * OpenAPI spec version: 2.17.3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.57
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * RespostaBoletosBaixaOperacionalLista Class Doc Comment
 *
 * @category Class
 * @description Objeto da lista com as informações de um título.
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class RespostaBoletosBaixaOperacionalLista implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'RespostaBoletosBaixaOperacional_lista';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'carteira' => 'int',
        'variacao' => 'int',
        'convenio' => 'int',
        'titulo' => '\Swagger\Client\Model\RespostaBoletosBaixaOperacionalTitulo'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'carteira' => 'int32',
        'variacao' => 'int32',
        'convenio' => 'int32',
        'titulo' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'carteira' => 'carteira',
        'variacao' => 'variacao',
        'convenio' => 'convenio',
        'titulo' => 'titulo'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'carteira' => 'setCarteira',
        'variacao' => 'setVariacao',
        'convenio' => 'setConvenio',
        'titulo' => 'setTitulo'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'carteira' => 'getCarteira',
        'variacao' => 'getVariacao',
        'convenio' => 'getConvenio',
        'titulo' => 'getTitulo'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }



    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['carteira'] = isset($data['carteira']) ? $data['carteira'] : null;
        $this->container['variacao'] = isset($data['variacao']) ? $data['variacao'] : null;
        $this->container['convenio'] = isset($data['convenio']) ? $data['convenio'] : null;
        $this->container['titulo'] = isset($data['titulo']) ? $data['titulo'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets carteira
     *
     * @return int
     */
    public function getCarteira()
    {
        return $this->container['carteira'];
    }

    /**
     * Sets carteira
     *
     * @param int $carteira Número da carteira do convênio de cobrança.
     *
     * @return $this
     */
    public function setCarteira($carteira)
    {
        $this->container['carteira'] = $carteira;

        return $this;
    }

    /**
     * Gets variacao
     *
     * @return int
     */
    public function getVariacao()
    {
        return $this->container['variacao'];
    }

    /**
     * Sets variacao
     *
     * @param int $variacao Número da variação da carteira do convênio de cobrança.
     *
     * @return $this
     */
    public function setVariacao($variacao)
    {
        $this->container['variacao'] = $variacao;

        return $this;
    }

    /**
     * Gets convenio
     *
     * @return int
     */
    public function getConvenio()
    {
        return $this->container['convenio'];
    }

    /**
     * Sets convenio
     *
     * @param int $convenio Número do convênio de Cobrança do Cliente.
     *
     * @return $this
     */
    public function setConvenio($convenio)
    {
        $this->container['convenio'] = $convenio;

        return $this;
    }

    /**
     * Gets titulo
     *
     * @return \Swagger\Client\Model\RespostaBoletosBaixaOperacionalTitulo
     */
    public function getTitulo()
    {
        return $this->container['titulo'];
    }

    /**
     * Sets titulo
     *
     * @param \Swagger\Client\Model\RespostaBoletosBaixaOperacionalTitulo $titulo titulo
     *
     * @return $this
     */
    public function setTitulo($titulo)
    {
        $this->container['titulo'] = $titulo;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
