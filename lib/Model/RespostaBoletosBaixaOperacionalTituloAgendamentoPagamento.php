<?php
/**
 * RespostaBoletosBaixaOperacionalTituloAgendamentoPagamento
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Cobranças API
 *
 * API para gerenciar os serviços de cobranças de cliente do Banco do Brasil S.A.
 *
 * OpenAPI spec version: 2.17.3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.57
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * RespostaBoletosBaixaOperacionalTituloAgendamentoPagamento Class Doc Comment
 *
 * @category Class
 * @description Informações referentes ao agendamento de pagamento do título.
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class RespostaBoletosBaixaOperacionalTituloAgendamentoPagamento implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'RespostaBoletosBaixaOperacional_titulo_agendamentoPagamento';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'momento' => 'string',
        'instituicao_financeira' => 'int',
        'canal' => 'int',
        'valor_cip' => 'double'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'momento' => null,
        'instituicao_financeira' => 'int32',
        'canal' => 'int32',
        'valor_cip' => 'double'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'momento' => 'momento',
        'instituicao_financeira' => 'instituicaoFinanceira',
        'canal' => 'canal',
        'valor_cip' => 'valorCIP'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'momento' => 'setMomento',
        'instituicao_financeira' => 'setInstituicaoFinanceira',
        'canal' => 'setCanal',
        'valor_cip' => 'setValorCip'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'momento' => 'getMomento',
        'instituicao_financeira' => 'getInstituicaoFinanceira',
        'canal' => 'getCanal',
        'valor_cip' => 'getValorCip'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }



    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['momento'] = isset($data['momento']) ? $data['momento'] : null;
        $this->container['instituicao_financeira'] = isset($data['instituicao_financeira']) ? $data['instituicao_financeira'] : null;
        $this->container['canal'] = isset($data['canal']) ? $data['canal'] : null;
        $this->container['valor_cip'] = isset($data['valor_cip']) ? $data['valor_cip'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets momento
     *
     * @return string
     */
    public function getMomento()
    {
        return $this->container['momento'];
    }

    /**
     * Sets momento
     *
     * @param string $momento Data e hora no qual foi agendado o recebimento/pagamento do título. Atenção! Trata-se apenas de uma promessa de pagamento que poderá ser cancelada ou não efetivada.
     *
     * @return $this
     */
    public function setMomento($momento)
    {
        $this->container['momento'] = $momento;

        return $this;
    }

    /**
     * Gets instituicao_financeira
     *
     * @return int
     */
    public function getInstituicaoFinanceira()
    {
        return $this->container['instituicao_financeira'];
    }

    /**
     * Sets instituicao_financeira
     *
     * @param int $instituicao_financeira Código de compensação bancária do SFN. Domínio: https://www.bcb.gov.br/Fis/CODCOMPE/Tabela.pdf
     *
     * @return $this
     */
    public function setInstituicaoFinanceira($instituicao_financeira)
    {
        $this->container['instituicao_financeira'] = $instituicao_financeira;

        return $this;
    }

    /**
     * Gets canal
     *
     * @return int
     */
    public function getCanal()
    {
        return $this->container['canal'];
    }

    /**
     * Sets canal
     *
     * @param int $canal Código para identificação da forma de pagamento e do canal onde foi pago o boleto.  Domínio: 1 - Agencias - Postos tradicionais 2 - Terminal de Auto-atendimento 3 - Internet (home / office banking) 4 - Pix 5 - Correspondente bancário 6 - Central de atendimento(Call Center) 7 - Arquivo Eletrônico 8 - DDA 9 - Correspondente bancário digital
     *
     * @return $this
     */
    public function setCanal($canal)
    {
        $this->container['canal'] = $canal;

        return $this;
    }

    /**
     * Gets valor_cip
     *
     * @return double
     */
    public function getValorCip()
    {
        return $this->container['valor_cip'];
    }

    /**
     * Sets valor_cip
     *
     * @param double $valor_cip Valor do pagamento agendado na Câmara Interbancária de Pagamentos - CIP, conforme informado na baixa operacional.
     *
     * @return $this
     */
    public function setValorCip($valor_cip)
    {
        $this->container['valor_cip'] = $valor_cip;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
