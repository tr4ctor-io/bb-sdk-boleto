<?php
/**
 * Juros
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Cobranças API
 *
 * API para gerenciar os serviços de cobranças de cliente do Banco do Brasil S.A.
 *
 * OpenAPI spec version: 2.17.3
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.57
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Boleto\Model;

use \ArrayAccess;
use \Swagger\Client\Boleto\ObjectSerializer;

/**
 * Juros Class Doc Comment
 *
 * @category Class
 * @description Inclusão de Juros de Mora em Boleto Bancário
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Juros implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'juros';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'tipo_juros' => 'int',
        'valor_juros' => 'double',
        'taxa_juros' => 'double'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'tipo_juros' => 'int32',
        'valor_juros' => 'double',
        'taxa_juros' => 'double'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'tipo_juros' => 'tipoJuros',
        'valor_juros' => 'valorJuros',
        'taxa_juros' => 'taxaJuros'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'tipo_juros' => 'setTipoJuros',
        'valor_juros' => 'setValorJuros',
        'taxa_juros' => 'setTaxaJuros'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'tipo_juros' => 'getTipoJuros',
        'valor_juros' => 'getValorJuros',
        'taxa_juros' => 'getTaxaJuros'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }



    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['tipo_juros'] = isset($data['tipo_juros']) ? $data['tipo_juros'] : null;
        $this->container['valor_juros'] = isset($data['valor_juros']) ? $data['valor_juros'] : null;
        $this->container['taxa_juros'] = isset($data['taxa_juros']) ? $data['taxa_juros'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets tipo_juros
     *
     * @return int
     */
    public function getTipoJuros()
    {
        return $this->container['tipo_juros'];
    }

    /**
     * Sets tipo_juros
     *
     * @param int $tipo_juros Valor do Juros de Mora a ser aplicado sobre o valor do Boleto
     *
     * @return $this
     */
    public function setTipoJuros($tipo_juros)
    {
        $this->container['tipo_juros'] = $tipo_juros;

        return $this;
    }

    /**
     * Gets valor_juros
     *
     * @return double
     */
    public function getValorJuros()
    {
        return $this->container['valor_juros'];
    }

    /**
     * Sets valor_juros
     *
     * @param double $valor_juros Taxa do Juros de Mora a ser aplicado sobre o valor do Boleto
     *
     * @return $this
     */
    public function setValorJuros($valor_juros)
    {
        $this->container['valor_juros'] = $valor_juros;

        return $this;
    }

    /**
     * Gets taxa_juros
     *
     * @return double
     */
    public function getTaxaJuros()
    {
        return $this->container['taxa_juros'];
    }

    /**
     * Sets taxa_juros
     *
     * @param double $taxa_juros Código para identificação do tipo de Juros de Mora que deverá ser aplicado ao Boleto. Valores a informar: 0 - Dispensar 1 - Valor por dia de atraso 2 - Taxa Mensal 3 - Isento
     *
     * @return $this
     */
    public function setTaxaJuros($taxa_juros)
    {
        $this->container['taxa_juros'] = $taxa_juros;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
