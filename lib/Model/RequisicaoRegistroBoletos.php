<?php
/**
 * RequisicaoRegistroBoletos
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Cobranças API
 *
 * API para gerenciar os serviços de cobranças de cliente do Banco do Brasil S.A.
 *
 * OpenAPI spec version: 2.17.3
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.57
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * RequisicaoRegistroBoletos Class Doc Comment
 *
 * @category Class
 * @description Representação dos campos de requisição de uma solicitação de criação de boletos bancários.
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class RequisicaoRegistroBoletos implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'RequisicaoRegistroBoletos';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'numero_convenio' => 'int',
        'numero_carteira' => 'int',
        'numero_variacao_carteira' => 'int',
        'codigo_modalidade' => 'int',
        'data_emissao' => 'string',
        'data_vencimento' => 'string',
        'valor_original' => 'float',
        'valor_abatimento' => 'float',
        'quantidade_dias_protesto' => 'float',
        'quantidade_dias_negativacao' => 'int',
        'orgao_negativador' => 'int',
        'indicador_aceite_titulo_vencido' => 'string',
        'numero_dias_limite_recebimento' => 'int',
        'codigo_aceite' => 'string',
        'codigo_tipo_titulo' => 'int',
        'descricao_tipo_titulo' => 'string',
        'indicador_permissao_recebimento_parcial' => 'string',
        'numero_titulo_beneficiario' => 'string',
        'campo_utilizacao_beneficiario' => 'string',
        'numero_titulo_cliente' => 'string',
        'mensagem_bloqueto_ocorrencia' => 'string',
        'desconto' => '\Swagger\Client\Model\RequisicaoRegistroBoletosDesconto',
        'segundo_desconto' => '\Swagger\Client\Model\RequisicaoRegistroBoletosSegundoDesconto',
        'terceiro_desconto' => '\Swagger\Client\Model\RequisicaoRegistroBoletosTerceiroDesconto',
        'juros_mora' => '\Swagger\Client\Model\RequisicaoRegistroBoletosJurosMora',
        'multa' => '\Swagger\Client\Model\RequisicaoRegistroBoletosMulta',
        'pagador' => '\Swagger\Client\Model\RequisicaoRegistroBoletosPagador',
        'beneficiario_final' => '\Swagger\Client\Model\RequisicaoRegistroBoletosBeneficiarioFinal',
        'indicador_pix' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'numero_convenio' => 'int64',
        'numero_carteira' => 'int32',
        'numero_variacao_carteira' => 'int32',
        'codigo_modalidade' => 'int32',
        'data_emissao' => null,
        'data_vencimento' => null,
        'valor_original' => 'float',
        'valor_abatimento' => 'float',
        'quantidade_dias_protesto' => 'float',
        'quantidade_dias_negativacao' => 'int32',
        'orgao_negativador' => 'int32',
        'indicador_aceite_titulo_vencido' => null,
        'numero_dias_limite_recebimento' => 'int32',
        'codigo_aceite' => null,
        'codigo_tipo_titulo' => 'int32',
        'descricao_tipo_titulo' => null,
        'indicador_permissao_recebimento_parcial' => null,
        'numero_titulo_beneficiario' => null,
        'campo_utilizacao_beneficiario' => null,
        'numero_titulo_cliente' => null,
        'mensagem_bloqueto_ocorrencia' => null,
        'desconto' => null,
        'segundo_desconto' => null,
        'terceiro_desconto' => null,
        'juros_mora' => null,
        'multa' => null,
        'pagador' => null,
        'beneficiario_final' => null,
        'indicador_pix' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'numero_convenio' => 'numeroConvenio',
        'numero_carteira' => 'numeroCarteira',
        'numero_variacao_carteira' => 'numeroVariacaoCarteira',
        'codigo_modalidade' => 'codigoModalidade',
        'data_emissao' => 'dataEmissao',
        'data_vencimento' => 'dataVencimento',
        'valor_original' => 'valorOriginal',
        'valor_abatimento' => 'valorAbatimento',
        'quantidade_dias_protesto' => 'quantidadeDiasProtesto',
        'quantidade_dias_negativacao' => 'quantidadeDiasNegativacao',
        'orgao_negativador' => 'orgaoNegativador',
        'indicador_aceite_titulo_vencido' => 'indicadorAceiteTituloVencido',
        'numero_dias_limite_recebimento' => 'numeroDiasLimiteRecebimento',
        'codigo_aceite' => 'codigoAceite',
        'codigo_tipo_titulo' => 'codigoTipoTitulo',
        'descricao_tipo_titulo' => 'descricaoTipoTitulo',
        'indicador_permissao_recebimento_parcial' => 'indicadorPermissaoRecebimentoParcial',
        'numero_titulo_beneficiario' => 'numeroTituloBeneficiario',
        'campo_utilizacao_beneficiario' => 'campoUtilizacaoBeneficiario',
        'numero_titulo_cliente' => 'numeroTituloCliente',
        'mensagem_bloqueto_ocorrencia' => 'mensagemBloquetoOcorrencia',
        'desconto' => 'desconto',
        'segundo_desconto' => 'segundoDesconto',
        'terceiro_desconto' => 'terceiroDesconto',
        'juros_mora' => 'jurosMora',
        'multa' => 'multa',
        'pagador' => 'pagador',
        'beneficiario_final' => 'beneficiarioFinal',
        'indicador_pix' => 'indicadorPix'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'numero_convenio' => 'setNumeroConvenio',
        'numero_carteira' => 'setNumeroCarteira',
        'numero_variacao_carteira' => 'setNumeroVariacaoCarteira',
        'codigo_modalidade' => 'setCodigoModalidade',
        'data_emissao' => 'setDataEmissao',
        'data_vencimento' => 'setDataVencimento',
        'valor_original' => 'setValorOriginal',
        'valor_abatimento' => 'setValorAbatimento',
        'quantidade_dias_protesto' => 'setQuantidadeDiasProtesto',
        'quantidade_dias_negativacao' => 'setQuantidadeDiasNegativacao',
        'orgao_negativador' => 'setOrgaoNegativador',
        'indicador_aceite_titulo_vencido' => 'setIndicadorAceiteTituloVencido',
        'numero_dias_limite_recebimento' => 'setNumeroDiasLimiteRecebimento',
        'codigo_aceite' => 'setCodigoAceite',
        'codigo_tipo_titulo' => 'setCodigoTipoTitulo',
        'descricao_tipo_titulo' => 'setDescricaoTipoTitulo',
        'indicador_permissao_recebimento_parcial' => 'setIndicadorPermissaoRecebimentoParcial',
        'numero_titulo_beneficiario' => 'setNumeroTituloBeneficiario',
        'campo_utilizacao_beneficiario' => 'setCampoUtilizacaoBeneficiario',
        'numero_titulo_cliente' => 'setNumeroTituloCliente',
        'mensagem_bloqueto_ocorrencia' => 'setMensagemBloquetoOcorrencia',
        'desconto' => 'setDesconto',
        'segundo_desconto' => 'setSegundoDesconto',
        'terceiro_desconto' => 'setTerceiroDesconto',
        'juros_mora' => 'setJurosMora',
        'multa' => 'setMulta',
        'pagador' => 'setPagador',
        'beneficiario_final' => 'setBeneficiarioFinal',
        'indicador_pix' => 'setIndicadorPix'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'numero_convenio' => 'getNumeroConvenio',
        'numero_carteira' => 'getNumeroCarteira',
        'numero_variacao_carteira' => 'getNumeroVariacaoCarteira',
        'codigo_modalidade' => 'getCodigoModalidade',
        'data_emissao' => 'getDataEmissao',
        'data_vencimento' => 'getDataVencimento',
        'valor_original' => 'getValorOriginal',
        'valor_abatimento' => 'getValorAbatimento',
        'quantidade_dias_protesto' => 'getQuantidadeDiasProtesto',
        'quantidade_dias_negativacao' => 'getQuantidadeDiasNegativacao',
        'orgao_negativador' => 'getOrgaoNegativador',
        'indicador_aceite_titulo_vencido' => 'getIndicadorAceiteTituloVencido',
        'numero_dias_limite_recebimento' => 'getNumeroDiasLimiteRecebimento',
        'codigo_aceite' => 'getCodigoAceite',
        'codigo_tipo_titulo' => 'getCodigoTipoTitulo',
        'descricao_tipo_titulo' => 'getDescricaoTipoTitulo',
        'indicador_permissao_recebimento_parcial' => 'getIndicadorPermissaoRecebimentoParcial',
        'numero_titulo_beneficiario' => 'getNumeroTituloBeneficiario',
        'campo_utilizacao_beneficiario' => 'getCampoUtilizacaoBeneficiario',
        'numero_titulo_cliente' => 'getNumeroTituloCliente',
        'mensagem_bloqueto_ocorrencia' => 'getMensagemBloquetoOcorrencia',
        'desconto' => 'getDesconto',
        'segundo_desconto' => 'getSegundoDesconto',
        'terceiro_desconto' => 'getTerceiroDesconto',
        'juros_mora' => 'getJurosMora',
        'multa' => 'getMulta',
        'pagador' => 'getPagador',
        'beneficiario_final' => 'getBeneficiarioFinal',
        'indicador_pix' => 'getIndicadorPix'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }



    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['numero_convenio'] = isset($data['numero_convenio']) ? $data['numero_convenio'] : null;
        $this->container['numero_carteira'] = isset($data['numero_carteira']) ? $data['numero_carteira'] : null;
        $this->container['numero_variacao_carteira'] = isset($data['numero_variacao_carteira']) ? $data['numero_variacao_carteira'] : null;
        $this->container['codigo_modalidade'] = isset($data['codigo_modalidade']) ? $data['codigo_modalidade'] : null;
        $this->container['data_emissao'] = isset($data['data_emissao']) ? $data['data_emissao'] : null;
        $this->container['data_vencimento'] = isset($data['data_vencimento']) ? $data['data_vencimento'] : null;
        $this->container['valor_original'] = isset($data['valor_original']) ? $data['valor_original'] : null;
        $this->container['valor_abatimento'] = isset($data['valor_abatimento']) ? $data['valor_abatimento'] : null;
        $this->container['quantidade_dias_protesto'] = isset($data['quantidade_dias_protesto']) ? $data['quantidade_dias_protesto'] : null;
        $this->container['quantidade_dias_negativacao'] = isset($data['quantidade_dias_negativacao']) ? $data['quantidade_dias_negativacao'] : null;
        $this->container['orgao_negativador'] = isset($data['orgao_negativador']) ? $data['orgao_negativador'] : null;
        $this->container['indicador_aceite_titulo_vencido'] = isset($data['indicador_aceite_titulo_vencido']) ? $data['indicador_aceite_titulo_vencido'] : null;
        $this->container['numero_dias_limite_recebimento'] = isset($data['numero_dias_limite_recebimento']) ? $data['numero_dias_limite_recebimento'] : null;
        $this->container['codigo_aceite'] = isset($data['codigo_aceite']) ? $data['codigo_aceite'] : null;
        $this->container['codigo_tipo_titulo'] = isset($data['codigo_tipo_titulo']) ? $data['codigo_tipo_titulo'] : null;
        $this->container['descricao_tipo_titulo'] = isset($data['descricao_tipo_titulo']) ? $data['descricao_tipo_titulo'] : null;
        $this->container['indicador_permissao_recebimento_parcial'] = isset($data['indicador_permissao_recebimento_parcial']) ? $data['indicador_permissao_recebimento_parcial'] : null;
        $this->container['numero_titulo_beneficiario'] = isset($data['numero_titulo_beneficiario']) ? $data['numero_titulo_beneficiario'] : null;
        $this->container['campo_utilizacao_beneficiario'] = isset($data['campo_utilizacao_beneficiario']) ? $data['campo_utilizacao_beneficiario'] : null;
        $this->container['numero_titulo_cliente'] = isset($data['numero_titulo_cliente']) ? $data['numero_titulo_cliente'] : null;
        $this->container['mensagem_bloqueto_ocorrencia'] = isset($data['mensagem_bloqueto_ocorrencia']) ? $data['mensagem_bloqueto_ocorrencia'] : null;
        $this->container['desconto'] = isset($data['desconto']) ? $data['desconto'] : null;
        $this->container['segundo_desconto'] = isset($data['segundo_desconto']) ? $data['segundo_desconto'] : null;
        $this->container['terceiro_desconto'] = isset($data['terceiro_desconto']) ? $data['terceiro_desconto'] : null;
        $this->container['juros_mora'] = isset($data['juros_mora']) ? $data['juros_mora'] : null;
        $this->container['multa'] = isset($data['multa']) ? $data['multa'] : null;
        $this->container['pagador'] = isset($data['pagador']) ? $data['pagador'] : null;
        $this->container['beneficiario_final'] = isset($data['beneficiario_final']) ? $data['beneficiario_final'] : null;
        $this->container['indicador_pix'] = isset($data['indicador_pix']) ? $data['indicador_pix'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['numero_convenio'] === null) {
            $invalidProperties[] = "'numero_convenio' can't be null";
        }
        if ($this->container['data_vencimento'] === null) {
            $invalidProperties[] = "'data_vencimento' can't be null";
        }
        if ($this->container['valor_original'] === null) {
            $invalidProperties[] = "'valor_original' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets numero_convenio
     *
     * @return int
     */
    public function getNumeroConvenio()
    {
        return $this->container['numero_convenio'];
    }

    /**
     * Sets numero_convenio
     *
     * @param int $numero_convenio Número do convênio de Cobrança do Cliente. Identificador determinado pelo sistema Cobrança para controlar a emissão de boletos, liquidação, crédito de valores ao Beneficiário e intercâmbio de dados com o cliente.
     *
     * @return $this
     */
    public function setNumeroConvenio($numero_convenio)
    {
        $this->container['numero_convenio'] = $numero_convenio;

        return $this;
    }

    /**
     * Gets numero_carteira
     *
     * @return int
     */
    public function getNumeroCarteira()
    {
        return $this->container['numero_carteira'];
    }

    /**
     * Sets numero_carteira
     *
     * @param int $numero_carteira Características do serviço de boleto bancário e como ele deve ser tratado pelo banco.
     *
     * @return $this
     */
    public function setNumeroCarteira($numero_carteira)
    {
        $this->container['numero_carteira'] = $numero_carteira;

        return $this;
    }

    /**
     * Gets numero_variacao_carteira
     *
     * @return int
     */
    public function getNumeroVariacaoCarteira()
    {
        return $this->container['numero_variacao_carteira'];
    }

    /**
     * Sets numero_variacao_carteira
     *
     * @param int $numero_variacao_carteira Número da variação da carteira do convênio de cobrança.
     *
     * @return $this
     */
    public function setNumeroVariacaoCarteira($numero_variacao_carteira)
    {
        $this->container['numero_variacao_carteira'] = $numero_variacao_carteira;

        return $this;
    }

    /**
     * Gets codigo_modalidade
     *
     * @return int
     */
    public function getCodigoModalidade()
    {
        return $this->container['codigo_modalidade'];
    }

    /**
     * Sets codigo_modalidade
     *
     * @param int $codigo_modalidade Identifica  a característica dos boletos dentro das modalidades de cobrança existentes no banco.  Domínio: 01 - SIMPLES; 04 - VINCULADA
     *
     * @return $this
     */
    public function setCodigoModalidade($codigo_modalidade)
    {
        $this->container['codigo_modalidade'] = $codigo_modalidade;

        return $this;
    }

    /**
     * Gets data_emissao
     *
     * @return string
     */
    public function getDataEmissao()
    {
        return $this->container['data_emissao'];
    }

    /**
     * Sets data_emissao
     *
     * @param string $data_emissao Data de emissão do boleto (formato \"dd.mm.aaaaa\").
     *
     * @return $this
     */
    public function setDataEmissao($data_emissao)
    {
        $this->container['data_emissao'] = $data_emissao;

        return $this;
    }

    /**
     * Gets data_vencimento
     *
     * @return string
     */
    public function getDataVencimento()
    {
        return $this->container['data_vencimento'];
    }

    /**
     * Sets data_vencimento
     *
     * @param string $data_vencimento Data de vencimento do boleto (formato \"dd.mm.aaaaa\").
     *
     * @return $this
     */
    public function setDataVencimento($data_vencimento)
    {
        $this->container['data_vencimento'] = $data_vencimento;

        return $this;
    }

    /**
     * Gets valor_original
     *
     * @return float
     */
    public function getValorOriginal()
    {
        return $this->container['valor_original'];
    }

    /**
     * Sets valor_original
     *
     * @param float $valor_original Valor de cobrança > 0.00, emitido em Real (formato decimal separado por \".\"). Valor do boleto no registro. Deve ser maior que a soma dos campos “VALOR DO DESCONTO DO TÍTULO” e “VALOR DO ABATIMENTO DO TÍTULO”, se informados. Informação não passível de alteração após a criação. No caso de emissão com valor equivocado, sugerimos cancelar e emitir novo boleto.
     *
     * @return $this
     */
    public function setValorOriginal($valor_original)
    {
        $this->container['valor_original'] = $valor_original;

        return $this;
    }

    /**
     * Gets valor_abatimento
     *
     * @return float
     */
    public function getValorAbatimento()
    {
        return $this->container['valor_abatimento'];
    }

    /**
     * Sets valor_abatimento
     *
     * @param float $valor_abatimento Valor de dedução do boleto >= 0.00 (formato decimal separado por \".\").
     *
     * @return $this
     */
    public function setValorAbatimento($valor_abatimento)
    {
        $this->container['valor_abatimento'] = $valor_abatimento;

        return $this;
    }

    /**
     * Gets quantidade_dias_protesto
     *
     * @return float
     */
    public function getQuantidadeDiasProtesto()
    {
        return $this->container['quantidade_dias_protesto'];
    }

    /**
     * Sets quantidade_dias_protesto
     *
     * @param float $quantidade_dias_protesto Quantos dias após a data de vencimento do boleto para iniciar o processo de cobrança através de protesto. (valor inteiro >= 0).
     *
     * @return $this
     */
    public function setQuantidadeDiasProtesto($quantidade_dias_protesto)
    {
        $this->container['quantidade_dias_protesto'] = $quantidade_dias_protesto;

        return $this;
    }

    /**
     * Gets quantidade_dias_negativacao
     *
     * @return int
     */
    public function getQuantidadeDiasNegativacao()
    {
        return $this->container['quantidade_dias_negativacao'];
    }

    /**
     * Sets quantidade_dias_negativacao
     *
     * @param int $quantidade_dias_negativacao Quantos dias após a data de vencimento do boleto para iniciar o processo de negativação através da opção escolhida no campo orgaoNegativador. (valor inteiro >= 0).
     *
     * @return $this
     */
    public function setQuantidadeDiasNegativacao($quantidade_dias_negativacao)
    {
        $this->container['quantidade_dias_negativacao'] = $quantidade_dias_negativacao;

        return $this;
    }

    /**
     * Gets orgao_negativador
     *
     * @return int
     */
    public function getOrgaoNegativador()
    {
        return $this->container['orgao_negativador'];
    }

    /**
     * Sets orgao_negativador
     *
     * @param int $orgao_negativador Código do Órgão Negativador.  Domínio: 10 - SERASA
     *
     * @return $this
     */
    public function setOrgaoNegativador($orgao_negativador)
    {
        $this->container['orgao_negativador'] = $orgao_negativador;

        return $this;
    }

    /**
     * Gets indicador_aceite_titulo_vencido
     *
     * @return string
     */
    public function getIndicadorAceiteTituloVencido()
    {
        return $this->container['indicador_aceite_titulo_vencido'];
    }

    /**
     * Sets indicador_aceite_titulo_vencido
     *
     * @param string $indicador_aceite_titulo_vencido Indicador de que o boleto pode ou não ser recebido após o vencimento. Campo não obrigatório  Se não informado, será assumido a informação de limite de recebimento que está definida no convênio.  Quando informado \"S\" em conjunto com o campo \"numeroDiasLimiteRecebimento\", será definido a quantidade de dias (corridos) que este boleto ficará disponível para pagamento após seu vencimento. Obs.: Se definido \"S\" e o campo \"numeroDiasLimiteRecebimento\" ficar com valor zero também será assumido a informação de limite de recebimento que está definida no convênio.  Quando informado \"N\", fica definindo que o boleto NÃO permite pagamento em atraso, portanto só aceitará pagamento até a data do vencimento ou o próximo dia útil, quando o vencimento ocorrer em dia não útil.  Quando informado qualquer valor diferente de \"S\" ou \"N\" será assumido a informação de limite de recebimento que está definida no convênio.
     *
     * @return $this
     */
    public function setIndicadorAceiteTituloVencido($indicador_aceite_titulo_vencido)
    {
        $this->container['indicador_aceite_titulo_vencido'] = $indicador_aceite_titulo_vencido;

        return $this;
    }

    /**
     * Gets numero_dias_limite_recebimento
     *
     * @return int
     */
    public function getNumeroDiasLimiteRecebimento()
    {
        return $this->container['numero_dias_limite_recebimento'];
    }

    /**
     * Sets numero_dias_limite_recebimento
     *
     * @param int $numero_dias_limite_recebimento Número de dias limite para recebimento. Informar valor inteiro > 0.
     *
     * @return $this
     */
    public function setNumeroDiasLimiteRecebimento($numero_dias_limite_recebimento)
    {
        $this->container['numero_dias_limite_recebimento'] = $numero_dias_limite_recebimento;

        return $this;
    }

    /**
     * Gets codigo_aceite
     *
     * @return string
     */
    public function getCodigoAceite()
    {
        return $this->container['codigo_aceite'];
    }

    /**
     * Sets codigo_aceite
     *
     * @param string $codigo_aceite Código para  identificar se o boleto de cobrança foi aceito (reconhecimento da dívida pelo Pagador).  Domínios: A - ACEITE N - NAO ACEITE
     *
     * @return $this
     */
    public function setCodigoAceite($codigo_aceite)
    {
        $this->container['codigo_aceite'] = $codigo_aceite;

        return $this;
    }

    /**
     * Gets codigo_tipo_titulo
     *
     * @return int
     */
    public function getCodigoTipoTitulo()
    {
        return $this->container['codigo_tipo_titulo'];
    }

    /**
     * Sets codigo_tipo_titulo
     *
     * @param int $codigo_tipo_titulo Código para identificar o tipo de boleto de cobrança.  Domínios: 1- CHEQUE 2- DUPLICATA MERCANTIL 3- DUPLICATA MTIL POR INDICACAO 4- DUPLICATA DE SERVICO 5- DUPLICATA DE SRVC P/INDICACAO 6- DUPLICATA RURAL 7- LETRA DE CAMBIO 8- NOTA DE CREDITO COMERCIAL 9- NOTA DE CREDITO A EXPORTACAO 10- NOTA DE CREDITO INDULTRIAL 11- NOTA DE CREDITO RURAL 12- NOTA PROMISSORIA 13- NOTA PROMISSORIA RURAL 14- TRIPLICATA MERCANTIL 15- TRIPLICATA DE SERVICO 16- NOTA DE SEGURO 17- RECIBO 18- FATURA 19- NOTA DE DEBITO 20- APOLICE DE SEGURO 21- MENSALIDADE ESCOLAR 22- PARCELA DE CONSORCIO 23- DIVIDA ATIVA DA UNIAO 24- DIVIDA ATIVA DE ESTADO 25- DIVIDA ATIVA DE MUNICIPIO 31- CARTAO DE CREDITO 32- BOLETO PROPOSTA 33- BOLETO APORTE 99- OUTROS.
     *
     * @return $this
     */
    public function setCodigoTipoTitulo($codigo_tipo_titulo)
    {
        $this->container['codigo_tipo_titulo'] = $codigo_tipo_titulo;

        return $this;
    }

    /**
     * Gets descricao_tipo_titulo
     *
     * @return string
     */
    public function getDescricaoTipoTitulo()
    {
        return $this->container['descricao_tipo_titulo'];
    }

    /**
     * Sets descricao_tipo_titulo
     *
     * @param string $descricao_tipo_titulo Descrição do tipo de boleto.
     *
     * @return $this
     */
    public function setDescricaoTipoTitulo($descricao_tipo_titulo)
    {
        $this->container['descricao_tipo_titulo'] = $descricao_tipo_titulo;

        return $this;
    }

    /**
     * Gets indicador_permissao_recebimento_parcial
     *
     * @return string
     */
    public function getIndicadorPermissaoRecebimentoParcial()
    {
        return $this->container['indicador_permissao_recebimento_parcial'];
    }

    /**
     * Sets indicador_permissao_recebimento_parcial
     *
     * @param string $indicador_permissao_recebimento_parcial Código para identificação da autorização de pagamento parcial do boleto.  Domínios: S - SIM N - NÃO
     *
     * @return $this
     */
    public function setIndicadorPermissaoRecebimentoParcial($indicador_permissao_recebimento_parcial)
    {
        $this->container['indicador_permissao_recebimento_parcial'] = $indicador_permissao_recebimento_parcial;

        return $this;
    }

    /**
     * Gets numero_titulo_beneficiario
     *
     * @return string
     */
    public function getNumeroTituloBeneficiario()
    {
        return $this->container['numero_titulo_beneficiario'];
    }

    /**
     * Sets numero_titulo_beneficiario
     *
     * @param string $numero_titulo_beneficiario São aceitos como caracteres válidos:       • caracteres alfanuméricos: A a Z, 0 a 9;       • caracteres especiais de conjunção: hifen (-),apostrofo (');            exemplos: D'EL-REI, D'ALCORTIVO, SANT'ANA       • separador de palavras: branco ( );     Obs: Quaisquer caracteres diferentes dos mencionados acima, serão considerados inválidos.
     *
     * @return $this
     */
    public function setNumeroTituloBeneficiario($numero_titulo_beneficiario)
    {
        $this->container['numero_titulo_beneficiario'] = $numero_titulo_beneficiario;

        return $this;
    }

    /**
     * Gets campo_utilizacao_beneficiario
     *
     * @return string
     */
    public function getCampoUtilizacaoBeneficiario()
    {
        return $this->container['campo_utilizacao_beneficiario'];
    }

    /**
     * Sets campo_utilizacao_beneficiario
     *
     * @param string $campo_utilizacao_beneficiario Informações adicionais sobre o beneficiário.
     *
     * @return $this
     */
    public function setCampoUtilizacaoBeneficiario($campo_utilizacao_beneficiario)
    {
        $this->container['campo_utilizacao_beneficiario'] = $campo_utilizacao_beneficiario;

        return $this;
    }

    /**
     * Gets numero_titulo_cliente
     *
     * @return string
     */
    public function getNumeroTituloCliente()
    {
        return $this->container['numero_titulo_cliente'];
    }

    /**
     * Sets numero_titulo_cliente
     *
     * @param string $numero_titulo_cliente Número de identificação do boleto (correspondente ao NOSSO NÚMERO), no formato STRING, com 20 dígitos, que deverá ser formatado da seguinte forma:  “000” +  (número do convênio com 7 dígitos) + (10 algarismos - se necessário, completar com zeros à esquerda).
     *
     * @return $this
     */
    public function setNumeroTituloCliente($numero_titulo_cliente)
    {
        $this->container['numero_titulo_cliente'] = $numero_titulo_cliente;

        return $this;
    }

    /**
     * Gets mensagem_bloqueto_ocorrencia
     *
     * @return string
     */
    public function getMensagemBloquetoOcorrencia()
    {
        return $this->container['mensagem_bloqueto_ocorrencia'];
    }

    /**
     * Sets mensagem_bloqueto_ocorrencia
     *
     * @param string $mensagem_bloqueto_ocorrencia Mensagem definida pelo beneficiário para ser impressa no boleto. (Limitado a 30 caracteres)
     *
     * @return $this
     */
    public function setMensagemBloquetoOcorrencia($mensagem_bloqueto_ocorrencia)
    {
        $this->container['mensagem_bloqueto_ocorrencia'] = $mensagem_bloqueto_ocorrencia;

        return $this;
    }

    /**
     * Gets desconto
     *
     * @return \Swagger\Client\Model\RequisicaoRegistroBoletosDesconto
     */
    public function getDesconto()
    {
        return $this->container['desconto'];
    }

    /**
     * Sets desconto
     *
     * @param \Swagger\Client\Model\RequisicaoRegistroBoletosDesconto $desconto desconto
     *
     * @return $this
     */
    public function setDesconto($desconto)
    {
        $this->container['desconto'] = $desconto;

        return $this;
    }

    /**
     * Gets segundo_desconto
     *
     * @return \Swagger\Client\Model\RequisicaoRegistroBoletosSegundoDesconto
     */
    public function getSegundoDesconto()
    {
        return $this->container['segundo_desconto'];
    }

    /**
     * Sets segundo_desconto
     *
     * @param \Swagger\Client\Model\RequisicaoRegistroBoletosSegundoDesconto $segundo_desconto segundo_desconto
     *
     * @return $this
     */
    public function setSegundoDesconto($segundo_desconto)
    {
        $this->container['segundo_desconto'] = $segundo_desconto;

        return $this;
    }

    /**
     * Gets terceiro_desconto
     *
     * @return \Swagger\Client\Model\RequisicaoRegistroBoletosTerceiroDesconto
     */
    public function getTerceiroDesconto()
    {
        return $this->container['terceiro_desconto'];
    }

    /**
     * Sets terceiro_desconto
     *
     * @param \Swagger\Client\Model\RequisicaoRegistroBoletosTerceiroDesconto $terceiro_desconto terceiro_desconto
     *
     * @return $this
     */
    public function setTerceiroDesconto($terceiro_desconto)
    {
        $this->container['terceiro_desconto'] = $terceiro_desconto;

        return $this;
    }

    /**
     * Gets juros_mora
     *
     * @return \Swagger\Client\Model\RequisicaoRegistroBoletosJurosMora
     */
    public function getJurosMora()
    {
        return $this->container['juros_mora'];
    }

    /**
     * Sets juros_mora
     *
     * @param \Swagger\Client\Model\RequisicaoRegistroBoletosJurosMora $juros_mora juros_mora
     *
     * @return $this
     */
    public function setJurosMora($juros_mora)
    {
        $this->container['juros_mora'] = $juros_mora;

        return $this;
    }

    /**
     * Gets multa
     *
     * @return \Swagger\Client\Model\RequisicaoRegistroBoletosMulta
     */
    public function getMulta()
    {
        return $this->container['multa'];
    }

    /**
     * Sets multa
     *
     * @param \Swagger\Client\Model\RequisicaoRegistroBoletosMulta $multa multa
     *
     * @return $this
     */
    public function setMulta($multa)
    {
        $this->container['multa'] = $multa;

        return $this;
    }

    /**
     * Gets pagador
     *
     * @return \Swagger\Client\Model\RequisicaoRegistroBoletosPagador
     */
    public function getPagador()
    {
        return $this->container['pagador'];
    }

    /**
     * Sets pagador
     *
     * @param \Swagger\Client\Model\RequisicaoRegistroBoletosPagador $pagador pagador
     *
     * @return $this
     */
    public function setPagador($pagador)
    {
        $this->container['pagador'] = $pagador;

        return $this;
    }

    /**
     * Gets beneficiario_final
     *
     * @return \Swagger\Client\Model\RequisicaoRegistroBoletosBeneficiarioFinal
     */
    public function getBeneficiarioFinal()
    {
        return $this->container['beneficiario_final'];
    }

    /**
     * Sets beneficiario_final
     *
     * @param \Swagger\Client\Model\RequisicaoRegistroBoletosBeneficiarioFinal $beneficiario_final beneficiario_final
     *
     * @return $this
     */
    public function setBeneficiarioFinal($beneficiario_final)
    {
        $this->container['beneficiario_final'] = $beneficiario_final;

        return $this;
    }

    /**
     * Gets indicador_pix
     *
     * @return string
     */
    public function getIndicadorPix()
    {
        return $this->container['indicador_pix'];
    }

    /**
     * Sets indicador_pix
     *
     * @param string $indicador_pix Código para informar se o boleto terá um QRCode Pix atrelado. Se informado caracter inválido,  assumirá 'N'.  Domínios: 'S' - QRCODE DINAMICO; 'N' - SEM PIX; OUTRO - SEM PIX
     *
     * @return $this
     */
    public function setIndicadorPix($indicador_pix)
    {
        $this->container['indicador_pix'] = $indicador_pix;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
