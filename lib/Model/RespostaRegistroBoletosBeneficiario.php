<?php
/**
 * RespostaRegistroBoletosBeneficiario
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Cobranças API
 *
 * API para gerenciar os serviços de cobranças de cliente do Banco do Brasil S.A.
 *
 * OpenAPI spec version: 2.17.3
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.57
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * RespostaRegistroBoletosBeneficiario Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class RespostaRegistroBoletosBeneficiario implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'RespostaRegistroBoletos_beneficiario';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'agencia' => 'float',
        'conta_corrente' => 'float',
        'tipo_endereco' => 'float',
        'logradouro' => 'string',
        'bairro' => 'string',
        'cidade' => 'string',
        'codigo_cidade' => 'float',
        'uf' => 'string',
        'cep' => 'float',
        'indicador_comprovacao' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'agencia' => null,
        'conta_corrente' => null,
        'tipo_endereco' => null,
        'logradouro' => null,
        'bairro' => null,
        'cidade' => null,
        'codigo_cidade' => null,
        'uf' => null,
        'cep' => null,
        'indicador_comprovacao' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'agencia' => 'agencia',
        'conta_corrente' => 'contaCorrente',
        'tipo_endereco' => 'tipoEndereco',
        'logradouro' => 'logradouro',
        'bairro' => 'bairro',
        'cidade' => 'cidade',
        'codigo_cidade' => 'codigoCidade',
        'uf' => 'uf',
        'cep' => 'cep',
        'indicador_comprovacao' => 'indicadorComprovacao'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'agencia' => 'setAgencia',
        'conta_corrente' => 'setContaCorrente',
        'tipo_endereco' => 'setTipoEndereco',
        'logradouro' => 'setLogradouro',
        'bairro' => 'setBairro',
        'cidade' => 'setCidade',
        'codigo_cidade' => 'setCodigoCidade',
        'uf' => 'setUf',
        'cep' => 'setCep',
        'indicador_comprovacao' => 'setIndicadorComprovacao'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'agencia' => 'getAgencia',
        'conta_corrente' => 'getContaCorrente',
        'tipo_endereco' => 'getTipoEndereco',
        'logradouro' => 'getLogradouro',
        'bairro' => 'getBairro',
        'cidade' => 'getCidade',
        'codigo_cidade' => 'getCodigoCidade',
        'uf' => 'getUf',
        'cep' => 'getCep',
        'indicador_comprovacao' => 'getIndicadorComprovacao'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }



    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['agencia'] = isset($data['agencia']) ? $data['agencia'] : null;
        $this->container['conta_corrente'] = isset($data['conta_corrente']) ? $data['conta_corrente'] : null;
        $this->container['tipo_endereco'] = isset($data['tipo_endereco']) ? $data['tipo_endereco'] : null;
        $this->container['logradouro'] = isset($data['logradouro']) ? $data['logradouro'] : null;
        $this->container['bairro'] = isset($data['bairro']) ? $data['bairro'] : null;
        $this->container['cidade'] = isset($data['cidade']) ? $data['cidade'] : null;
        $this->container['codigo_cidade'] = isset($data['codigo_cidade']) ? $data['codigo_cidade'] : null;
        $this->container['uf'] = isset($data['uf']) ? $data['uf'] : null;
        $this->container['cep'] = isset($data['cep']) ? $data['cep'] : null;
        $this->container['indicador_comprovacao'] = isset($data['indicador_comprovacao']) ? $data['indicador_comprovacao'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets agencia
     *
     * @return float
     */
    public function getAgencia()
    {
        return $this->container['agencia'];
    }

    /**
     * Sets agencia
     *
     * @param float $agencia Agência do beneficiário.
     *
     * @return $this
     */
    public function setAgencia($agencia)
    {
        $this->container['agencia'] = $agencia;

        return $this;
    }

    /**
     * Gets conta_corrente
     *
     * @return float
     */
    public function getContaCorrente()
    {
        return $this->container['conta_corrente'];
    }

    /**
     * Sets conta_corrente
     *
     * @param float $conta_corrente Número da conta corrente do beneficiário.
     *
     * @return $this
     */
    public function setContaCorrente($conta_corrente)
    {
        $this->container['conta_corrente'] = $conta_corrente;

        return $this;
    }

    /**
     * Gets tipo_endereco
     *
     * @return float
     */
    public function getTipoEndereco()
    {
        return $this->container['tipo_endereco'];
    }

    /**
     * Sets tipo_endereco
     *
     * @param float $tipo_endereco Código do tipo de endereço do beneficiário.
     *
     * @return $this
     */
    public function setTipoEndereco($tipo_endereco)
    {
        $this->container['tipo_endereco'] = $tipo_endereco;

        return $this;
    }

    /**
     * Gets logradouro
     *
     * @return string
     */
    public function getLogradouro()
    {
        return $this->container['logradouro'];
    }

    /**
     * Sets logradouro
     *
     * @param string $logradouro Nome do logradouro do beneficiário.
     *
     * @return $this
     */
    public function setLogradouro($logradouro)
    {
        $this->container['logradouro'] = $logradouro;

        return $this;
    }

    /**
     * Gets bairro
     *
     * @return string
     */
    public function getBairro()
    {
        return $this->container['bairro'];
    }

    /**
     * Sets bairro
     *
     * @param string $bairro Bairro do Beneficiário.
     *
     * @return $this
     */
    public function setBairro($bairro)
    {
        $this->container['bairro'] = $bairro;

        return $this;
    }

    /**
     * Gets cidade
     *
     * @return string
     */
    public function getCidade()
    {
        return $this->container['cidade'];
    }

    /**
     * Sets cidade
     *
     * @param string $cidade Cidade do Beneficiário.
     *
     * @return $this
     */
    public function setCidade($cidade)
    {
        $this->container['cidade'] = $cidade;

        return $this;
    }

    /**
     * Gets codigo_cidade
     *
     * @return float
     */
    public function getCodigoCidade()
    {
        return $this->container['codigo_cidade'];
    }

    /**
     * Sets codigo_cidade
     *
     * @param float $codigo_cidade Identificador da cidade do beneficiário.
     *
     * @return $this
     */
    public function setCodigoCidade($codigo_cidade)
    {
        $this->container['codigo_cidade'] = $codigo_cidade;

        return $this;
    }

    /**
     * Gets uf
     *
     * @return string
     */
    public function getUf()
    {
        return $this->container['uf'];
    }

    /**
     * Sets uf
     *
     * @param string $uf Sigla do Estado do beneficiário.
     *
     * @return $this
     */
    public function setUf($uf)
    {
        $this->container['uf'] = $uf;

        return $this;
    }

    /**
     * Gets cep
     *
     * @return float
     */
    public function getCep()
    {
        return $this->container['cep'];
    }

    /**
     * Sets cep
     *
     * @param float $cep Código Postal do Beneficiário.
     *
     * @return $this
     */
    public function setCep($cep)
    {
        $this->container['cep'] = $cep;

        return $this;
    }

    /**
     * Gets indicador_comprovacao
     *
     * @return string
     */
    public function getIndicadorComprovacao()
    {
        return $this->container['indicador_comprovacao'];
    }

    /**
     * Sets indicador_comprovacao
     *
     * @param string $indicador_comprovacao Indicador de prova de vida do beneficiário.
     *
     * @return $this
     */
    public function setIndicadorComprovacao($indicador_comprovacao)
    {
        $this->container['indicador_comprovacao'] = $indicador_comprovacao;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
