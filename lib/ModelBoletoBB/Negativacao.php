<?php
/**
 * Negativacao
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Cobranças API
 *
 * API para gerenciar os serviços de cobranças de cliente do Banco do Brasil S.A.
 *
 * OpenAPI spec version: 2.17.3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.57
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\ModelBoletoBB;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * Negativacao Class Doc Comment
 *
 * @category Class
 * @description Inclui condições de Negativação de Boleto Bancário
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Negativacao implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'negativacao';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'quantidade_dias_negativacao' => 'int',
        'tipo_negativacao' => 'int',
        'orgao_negativador' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'quantidade_dias_negativacao' => 'int32',
        'tipo_negativacao' => 'int32',
        'orgao_negativador' => 'int32'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'quantidade_dias_negativacao' => 'quantidadeDiasNegativacao',
        'tipo_negativacao' => 'tipoNegativacao',
        'orgao_negativador' => 'orgaoNegativador'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'quantidade_dias_negativacao' => 'setQuantidadeDiasNegativacao',
        'tipo_negativacao' => 'setTipoNegativacao',
        'orgao_negativador' => 'setOrgaoNegativador'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'quantidade_dias_negativacao' => 'getQuantidadeDiasNegativacao',
        'tipo_negativacao' => 'getTipoNegativacao',
        'orgao_negativador' => 'getOrgaoNegativador'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }



    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['quantidade_dias_negativacao'] = isset($data['quantidade_dias_negativacao']) ? $data['quantidade_dias_negativacao'] : null;
        $this->container['tipo_negativacao'] = isset($data['tipo_negativacao']) ? $data['tipo_negativacao'] : null;
        $this->container['orgao_negativador'] = isset($data['orgao_negativador']) ? $data['orgao_negativador'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets quantidade_dias_negativacao
     *
     * @return int
     */
    public function getQuantidadeDiasNegativacao()
    {
        return $this->container['quantidade_dias_negativacao'];
    }

    /**
     * Sets quantidade_dias_negativacao
     *
     * @param int $quantidade_dias_negativacao Quantidade de dias, após o vencimento do Boleto, que o Boleto será Negativado
     *
     * @return $this
     */
    public function setQuantidadeDiasNegativacao($quantidade_dias_negativacao)
    {
        $this->container['quantidade_dias_negativacao'] = $quantidade_dias_negativacao;

        return $this;
    }

    /**
     * Gets tipo_negativacao
     *
     * @return int
     */
    public function getTipoNegativacao()
    {
        return $this->container['tipo_negativacao'];
    }

    /**
     * Sets tipo_negativacao
     *
     * @param int $tipo_negativacao Código para identificação do tipo de Negativação que deverá ser aplicado ao Boleto. Valores a informar: 1 - Incluir Negativação 2 - Alterar Negativação 3 - Cancelar Negativação 4 - Excluir Negativação
     *
     * @return $this
     */
    public function setTipoNegativacao($tipo_negativacao)
    {
        $this->container['tipo_negativacao'] = $tipo_negativacao;

        return $this;
    }

    /**
     * Gets orgao_negativador
     *
     * @return int
     */
    public function getOrgaoNegativador()
    {
        return $this->container['orgao_negativador'];
    }

    /**
     * Sets orgao_negativador
     *
     * @param int $orgao_negativador Código do Órgão Negativador.  Domínio: 10 - SERASA  11 - QUOD.
     *
     * @return $this
     */
    public function setOrgaoNegativador($orgao_negativador)
    {
        $this->container['orgao_negativador'] = $orgao_negativador;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
