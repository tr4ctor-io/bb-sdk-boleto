<?php
/**
 * BoletosApi
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Cobranças API
 *
 * API para gerenciar os serviços de cobranças de cliente do Banco do Brasil S.A.
 *
 * OpenAPI spec version: 2.17.3
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.57
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Swagger\Client\Boleto\ApiException;
use Swagger\Client\Boleto\Configuration;
use Swagger\Client\Boleto\HeaderSelector;
use Swagger\Client\Boleto\ObjectSerializer;

/**
 * BoletosApi Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class BoletosApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation alteraBoletoBancarioId
     *
     * Altera um boleto bancário
     *
     * @param  \Swagger\Client\Model\RequisicaoAlterarBoleto $body Representação dos campos de requisição de uma solicitação de alteração dos dados de boletos bancários. (required)
     * @param  string $authorization É um “token” de acesso fornecido pelo OAuth 2.0.    Example: Bearer [ACCESS_TOKEN] (required)
     * @param  string $gw_dev_app_key É a chave de acesso do aplicativo do desenvolvedor utilizada em produção, obtida no Portal do Desenvolvedor. Essa chave será usada para identificação do aplicativo.  Para os testes em ambiente de homologação, trocar por gw-app-key.  Ex: 0021239456d80136bebf005056891bed. CAMPO OBRIGATÓRIO. (required)
     * @param  string $id Número do título de cobrança. (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\RespostaAlterarBoleto
     */
    public function alteraBoletoBancarioId($body, $authorization, $gw_dev_app_key, $id)
    {
        list($response) = $this->alteraBoletoBancarioIdWithHttpInfo($body, $authorization, $gw_dev_app_key, $id);
        return $response;
    }

    /**
     * Operation alteraBoletoBancarioIdWithHttpInfo
     *
     * Altera um boleto bancário
     *
     * @param  \Swagger\Client\Model\RequisicaoAlterarBoleto $body Representação dos campos de requisição de uma solicitação de alteração dos dados de boletos bancários. (required)
     * @param  string $authorization É um “token” de acesso fornecido pelo OAuth 2.0.    Example: Bearer [ACCESS_TOKEN] (required)
     * @param  string $gw_dev_app_key É a chave de acesso do aplicativo do desenvolvedor utilizada em produção, obtida no Portal do Desenvolvedor. Essa chave será usada para identificação do aplicativo.  Para os testes em ambiente de homologação, trocar por gw-app-key.  Ex: 0021239456d80136bebf005056891bed. CAMPO OBRIGATÓRIO. (required)
     * @param  string $id Número do título de cobrança. (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\RespostaAlterarBoleto, HTTP status code, HTTP response headers (array of strings)
     */
    public function alteraBoletoBancarioIdWithHttpInfo($body, $authorization, $gw_dev_app_key, $id)
    {
        $returnType = '\Swagger\Client\Model\RespostaAlterarBoleto';
        $request = $this->alteraBoletoBancarioIdRequest($body, $authorization, $gw_dev_app_key, $id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\RespostaAlterarBoleto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\Erro',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErroOAuthNaoAutorizado',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\Erro',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\Erro',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation alteraBoletoBancarioIdAsync
     *
     * Altera um boleto bancário
     *
     * @param  \Swagger\Client\Model\RequisicaoAlterarBoleto $body Representação dos campos de requisição de uma solicitação de alteração dos dados de boletos bancários. (required)
     * @param  string $authorization É um “token” de acesso fornecido pelo OAuth 2.0.    Example: Bearer [ACCESS_TOKEN] (required)
     * @param  string $gw_dev_app_key É a chave de acesso do aplicativo do desenvolvedor utilizada em produção, obtida no Portal do Desenvolvedor. Essa chave será usada para identificação do aplicativo.  Para os testes em ambiente de homologação, trocar por gw-app-key.  Ex: 0021239456d80136bebf005056891bed. CAMPO OBRIGATÓRIO. (required)
     * @param  string $id Número do título de cobrança. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function alteraBoletoBancarioIdAsync($body, $authorization, $gw_dev_app_key, $id)
    {
        return $this->alteraBoletoBancarioIdAsyncWithHttpInfo($body, $authorization, $gw_dev_app_key, $id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation alteraBoletoBancarioIdAsyncWithHttpInfo
     *
     * Altera um boleto bancário
     *
     * @param  \Swagger\Client\Model\RequisicaoAlterarBoleto $body Representação dos campos de requisição de uma solicitação de alteração dos dados de boletos bancários. (required)
     * @param  string $authorization É um “token” de acesso fornecido pelo OAuth 2.0.    Example: Bearer [ACCESS_TOKEN] (required)
     * @param  string $gw_dev_app_key É a chave de acesso do aplicativo do desenvolvedor utilizada em produção, obtida no Portal do Desenvolvedor. Essa chave será usada para identificação do aplicativo.  Para os testes em ambiente de homologação, trocar por gw-app-key.  Ex: 0021239456d80136bebf005056891bed. CAMPO OBRIGATÓRIO. (required)
     * @param  string $id Número do título de cobrança. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function alteraBoletoBancarioIdAsyncWithHttpInfo($body, $authorization, $gw_dev_app_key, $id)
    {
        $returnType = '\Swagger\Client\Model\RespostaAlterarBoleto';
        $request = $this->alteraBoletoBancarioIdRequest($body, $authorization, $gw_dev_app_key, $id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'alteraBoletoBancarioId'
     *
     * @param  \Swagger\Client\Model\RequisicaoAlterarBoleto $body Representação dos campos de requisição de uma solicitação de alteração dos dados de boletos bancários. (required)
     * @param  string $authorization É um “token” de acesso fornecido pelo OAuth 2.0.    Example: Bearer [ACCESS_TOKEN] (required)
     * @param  string $gw_dev_app_key É a chave de acesso do aplicativo do desenvolvedor utilizada em produção, obtida no Portal do Desenvolvedor. Essa chave será usada para identificação do aplicativo.  Para os testes em ambiente de homologação, trocar por gw-app-key.  Ex: 0021239456d80136bebf005056891bed. CAMPO OBRIGATÓRIO. (required)
     * @param  string $id Número do título de cobrança. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function alteraBoletoBancarioIdRequest($body, $authorization, $gw_dev_app_key, $id)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling alteraBoletoBancarioId'
            );
        }
        // verify the required parameter 'authorization' is set
        if ($authorization === null || (is_array($authorization) && count($authorization) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $authorization when calling alteraBoletoBancarioId'
            );
        }
        // verify the required parameter 'gw_dev_app_key' is set
        if ($gw_dev_app_key === null || (is_array($gw_dev_app_key) && count($gw_dev_app_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $gw_dev_app_key when calling alteraBoletoBancarioId'
            );
        }
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling alteraBoletoBancarioId'
            );
        }

        $resourcePath = '/boletos/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($gw_dev_app_key !== null) {
            $queryParams['gw-dev-app-key'] = ObjectSerializer::toQueryValue($gw_dev_app_key, null);
        }
        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = ObjectSerializer::toHeaderValue($authorization);
        }

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'PATCH',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation boletosBaixaOperacional
     *
     * Informações de Baixa Operacional de Boletos
     *
     * @param  string $gw_dev_app_key É a chave de acesso do aplicativo do desenvolvedor utilizada em produção, obtida no Portal do Desenvolvedor. Essa chave será usada para identificação do aplicativo.  Para os testes em ambiente de homologação, trocar por gw-app-key.  Ex: 0021239456d80136bebf005056891bed. CAMPO OBRIGATÓRIO. (required)
     * @param  string $authorization É um \&quot;token\&quot; de acesso fornecido pelo OAuth 2.0. Ex: Bearer [ACCESS_TOKEN] (required)
     * @param  int $agencia Número da agência do beneficiário, sem o dígito verificador. (required)
     * @param  int $conta Número da conta do beneficiário, sem o dígito verificador. (required)
     * @param  int $carteira Número da carteira do convênio de cobrança. (required)
     * @param  int $variacao Número da variação da carteira do convênio de cobrança. (required)
     * @param  string $data_inicio_agendamento_titulo Data de agendamento inicial para delimitar período da consulta. (required)
     * @param  string $data_fim_agendamento_titulo Data de agendamento final para delimitar período da consulta. (required)
     * @param  int $estado_baixa_operacional Código para identificar o estado da baixa operacional. Domínio:1 - BAIXA OPERACIONAL BB; 2 - BAIXA OPERACIONAL OUTROS BANCOS; 10- CANCELAMENTO DE BAIXA OPERACIONAL (optional)
     * @param  int $modalidade_titulo Código para identificar a característica dos boletos dentro das modalidades de cobrança existentes no banco.  Domínio: 1 - SIMPLES 4 - VINCULADA (optional)
     * @param  string $data_inicio_vencimento_titulo Data de vencimento inicial para delimitar período da consulta. (optional)
     * @param  string $data_fim_vencimento_titulo Data de vencimento final para delimitar período da consulta. (optional)
     * @param  string $data_inicio_registro_titulo Data de registro inicial para delimitar período da consulta. (optional)
     * @param  string $data_fim_registro_titulo Data de registro final para delimitar período da consulta. (optional)
     * @param  string $horario_inicio_agendamento_titulo Hora de agendamento inicial para delimitar período da consulta. (optional)
     * @param  string $horario_fim_agendamento_titulo Hora de agendamento final para delimitar período da consulta. (optional)
     * @param  string $id_proximo_titulo Identificador do próximo título da próxima paginação a ser consultado. Somente deve ser utilizado em caso de pesquisas que retornem mais de 650 boletos. Se na resposta da primeira consulta, ou consulta anterior, o campo \&quot;possuiMaisTitulos\&quot; retorne o valor \&quot;S\&quot;, então na próxima chamada, o usuário deve informar o valor do campo \&quot;proximoTitulo\&quot; que veio na resposta, a partir do qual será iniciada nova consulta. (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\RespostaBoletosBaixaOperacional
     */
    public function boletosBaixaOperacional($gw_dev_app_key, $authorization, $agencia, $conta, $carteira, $variacao, $data_inicio_agendamento_titulo, $data_fim_agendamento_titulo, $estado_baixa_operacional = null, $modalidade_titulo = null, $data_inicio_vencimento_titulo = null, $data_fim_vencimento_titulo = null, $data_inicio_registro_titulo = null, $data_fim_registro_titulo = null, $horario_inicio_agendamento_titulo = null, $horario_fim_agendamento_titulo = null, $id_proximo_titulo = null)
    {
        list($response) = $this->boletosBaixaOperacionalWithHttpInfo($gw_dev_app_key, $authorization, $agencia, $conta, $carteira, $variacao, $data_inicio_agendamento_titulo, $data_fim_agendamento_titulo, $estado_baixa_operacional, $modalidade_titulo, $data_inicio_vencimento_titulo, $data_fim_vencimento_titulo, $data_inicio_registro_titulo, $data_fim_registro_titulo, $horario_inicio_agendamento_titulo, $horario_fim_agendamento_titulo, $id_proximo_titulo);
        return $response;
    }

    /**
     * Operation boletosBaixaOperacionalWithHttpInfo
     *
     * Informações de Baixa Operacional de Boletos
     *
     * @param  string $gw_dev_app_key É a chave de acesso do aplicativo do desenvolvedor utilizada em produção, obtida no Portal do Desenvolvedor. Essa chave será usada para identificação do aplicativo.  Para os testes em ambiente de homologação, trocar por gw-app-key.  Ex: 0021239456d80136bebf005056891bed. CAMPO OBRIGATÓRIO. (required)
     * @param  string $authorization É um \&quot;token\&quot; de acesso fornecido pelo OAuth 2.0. Ex: Bearer [ACCESS_TOKEN] (required)
     * @param  int $agencia Número da agência do beneficiário, sem o dígito verificador. (required)
     * @param  int $conta Número da conta do beneficiário, sem o dígito verificador. (required)
     * @param  int $carteira Número da carteira do convênio de cobrança. (required)
     * @param  int $variacao Número da variação da carteira do convênio de cobrança. (required)
     * @param  string $data_inicio_agendamento_titulo Data de agendamento inicial para delimitar período da consulta. (required)
     * @param  string $data_fim_agendamento_titulo Data de agendamento final para delimitar período da consulta. (required)
     * @param  int $estado_baixa_operacional Código para identificar o estado da baixa operacional. Domínio:1 - BAIXA OPERACIONAL BB; 2 - BAIXA OPERACIONAL OUTROS BANCOS; 10- CANCELAMENTO DE BAIXA OPERACIONAL (optional)
     * @param  int $modalidade_titulo Código para identificar a característica dos boletos dentro das modalidades de cobrança existentes no banco.  Domínio: 1 - SIMPLES 4 - VINCULADA (optional)
     * @param  string $data_inicio_vencimento_titulo Data de vencimento inicial para delimitar período da consulta. (optional)
     * @param  string $data_fim_vencimento_titulo Data de vencimento final para delimitar período da consulta. (optional)
     * @param  string $data_inicio_registro_titulo Data de registro inicial para delimitar período da consulta. (optional)
     * @param  string $data_fim_registro_titulo Data de registro final para delimitar período da consulta. (optional)
     * @param  string $horario_inicio_agendamento_titulo Hora de agendamento inicial para delimitar período da consulta. (optional)
     * @param  string $horario_fim_agendamento_titulo Hora de agendamento final para delimitar período da consulta. (optional)
     * @param  string $id_proximo_titulo Identificador do próximo título da próxima paginação a ser consultado. Somente deve ser utilizado em caso de pesquisas que retornem mais de 650 boletos. Se na resposta da primeira consulta, ou consulta anterior, o campo \&quot;possuiMaisTitulos\&quot; retorne o valor \&quot;S\&quot;, então na próxima chamada, o usuário deve informar o valor do campo \&quot;proximoTitulo\&quot; que veio na resposta, a partir do qual será iniciada nova consulta. (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\RespostaBoletosBaixaOperacional, HTTP status code, HTTP response headers (array of strings)
     */
    public function boletosBaixaOperacionalWithHttpInfo($gw_dev_app_key, $authorization, $agencia, $conta, $carteira, $variacao, $data_inicio_agendamento_titulo, $data_fim_agendamento_titulo, $estado_baixa_operacional = null, $modalidade_titulo = null, $data_inicio_vencimento_titulo = null, $data_fim_vencimento_titulo = null, $data_inicio_registro_titulo = null, $data_fim_registro_titulo = null, $horario_inicio_agendamento_titulo = null, $horario_fim_agendamento_titulo = null, $id_proximo_titulo = null)
    {
        $returnType = '\Swagger\Client\Model\RespostaBoletosBaixaOperacional';
        $request = $this->boletosBaixaOperacionalRequest($gw_dev_app_key, $authorization, $agencia, $conta, $carteira, $variacao, $data_inicio_agendamento_titulo, $data_fim_agendamento_titulo, $estado_baixa_operacional, $modalidade_titulo, $data_inicio_vencimento_titulo, $data_fim_vencimento_titulo, $data_inicio_registro_titulo, $data_fim_registro_titulo, $horario_inicio_agendamento_titulo, $horario_fim_agendamento_titulo, $id_proximo_titulo);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\RespostaBoletosBaixaOperacional',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErroV4',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErroOAuthNaoAutorizado',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErroV4',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation boletosBaixaOperacionalAsync
     *
     * Informações de Baixa Operacional de Boletos
     *
     * @param  string $gw_dev_app_key É a chave de acesso do aplicativo do desenvolvedor utilizada em produção, obtida no Portal do Desenvolvedor. Essa chave será usada para identificação do aplicativo.  Para os testes em ambiente de homologação, trocar por gw-app-key.  Ex: 0021239456d80136bebf005056891bed. CAMPO OBRIGATÓRIO. (required)
     * @param  string $authorization É um \&quot;token\&quot; de acesso fornecido pelo OAuth 2.0. Ex: Bearer [ACCESS_TOKEN] (required)
     * @param  int $agencia Número da agência do beneficiário, sem o dígito verificador. (required)
     * @param  int $conta Número da conta do beneficiário, sem o dígito verificador. (required)
     * @param  int $carteira Número da carteira do convênio de cobrança. (required)
     * @param  int $variacao Número da variação da carteira do convênio de cobrança. (required)
     * @param  string $data_inicio_agendamento_titulo Data de agendamento inicial para delimitar período da consulta. (required)
     * @param  string $data_fim_agendamento_titulo Data de agendamento final para delimitar período da consulta. (required)
     * @param  int $estado_baixa_operacional Código para identificar o estado da baixa operacional. Domínio:1 - BAIXA OPERACIONAL BB; 2 - BAIXA OPERACIONAL OUTROS BANCOS; 10- CANCELAMENTO DE BAIXA OPERACIONAL (optional)
     * @param  int $modalidade_titulo Código para identificar a característica dos boletos dentro das modalidades de cobrança existentes no banco.  Domínio: 1 - SIMPLES 4 - VINCULADA (optional)
     * @param  string $data_inicio_vencimento_titulo Data de vencimento inicial para delimitar período da consulta. (optional)
     * @param  string $data_fim_vencimento_titulo Data de vencimento final para delimitar período da consulta. (optional)
     * @param  string $data_inicio_registro_titulo Data de registro inicial para delimitar período da consulta. (optional)
     * @param  string $data_fim_registro_titulo Data de registro final para delimitar período da consulta. (optional)
     * @param  string $horario_inicio_agendamento_titulo Hora de agendamento inicial para delimitar período da consulta. (optional)
     * @param  string $horario_fim_agendamento_titulo Hora de agendamento final para delimitar período da consulta. (optional)
     * @param  string $id_proximo_titulo Identificador do próximo título da próxima paginação a ser consultado. Somente deve ser utilizado em caso de pesquisas que retornem mais de 650 boletos. Se na resposta da primeira consulta, ou consulta anterior, o campo \&quot;possuiMaisTitulos\&quot; retorne o valor \&quot;S\&quot;, então na próxima chamada, o usuário deve informar o valor do campo \&quot;proximoTitulo\&quot; que veio na resposta, a partir do qual será iniciada nova consulta. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function boletosBaixaOperacionalAsync($gw_dev_app_key, $authorization, $agencia, $conta, $carteira, $variacao, $data_inicio_agendamento_titulo, $data_fim_agendamento_titulo, $estado_baixa_operacional = null, $modalidade_titulo = null, $data_inicio_vencimento_titulo = null, $data_fim_vencimento_titulo = null, $data_inicio_registro_titulo = null, $data_fim_registro_titulo = null, $horario_inicio_agendamento_titulo = null, $horario_fim_agendamento_titulo = null, $id_proximo_titulo = null)
    {
        return $this->boletosBaixaOperacionalAsyncWithHttpInfo($gw_dev_app_key, $authorization, $agencia, $conta, $carteira, $variacao, $data_inicio_agendamento_titulo, $data_fim_agendamento_titulo, $estado_baixa_operacional, $modalidade_titulo, $data_inicio_vencimento_titulo, $data_fim_vencimento_titulo, $data_inicio_registro_titulo, $data_fim_registro_titulo, $horario_inicio_agendamento_titulo, $horario_fim_agendamento_titulo, $id_proximo_titulo)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation boletosBaixaOperacionalAsyncWithHttpInfo
     *
     * Informações de Baixa Operacional de Boletos
     *
     * @param  string $gw_dev_app_key É a chave de acesso do aplicativo do desenvolvedor utilizada em produção, obtida no Portal do Desenvolvedor. Essa chave será usada para identificação do aplicativo.  Para os testes em ambiente de homologação, trocar por gw-app-key.  Ex: 0021239456d80136bebf005056891bed. CAMPO OBRIGATÓRIO. (required)
     * @param  string $authorization É um \&quot;token\&quot; de acesso fornecido pelo OAuth 2.0. Ex: Bearer [ACCESS_TOKEN] (required)
     * @param  int $agencia Número da agência do beneficiário, sem o dígito verificador. (required)
     * @param  int $conta Número da conta do beneficiário, sem o dígito verificador. (required)
     * @param  int $carteira Número da carteira do convênio de cobrança. (required)
     * @param  int $variacao Número da variação da carteira do convênio de cobrança. (required)
     * @param  string $data_inicio_agendamento_titulo Data de agendamento inicial para delimitar período da consulta. (required)
     * @param  string $data_fim_agendamento_titulo Data de agendamento final para delimitar período da consulta. (required)
     * @param  int $estado_baixa_operacional Código para identificar o estado da baixa operacional. Domínio:1 - BAIXA OPERACIONAL BB; 2 - BAIXA OPERACIONAL OUTROS BANCOS; 10- CANCELAMENTO DE BAIXA OPERACIONAL (optional)
     * @param  int $modalidade_titulo Código para identificar a característica dos boletos dentro das modalidades de cobrança existentes no banco.  Domínio: 1 - SIMPLES 4 - VINCULADA (optional)
     * @param  string $data_inicio_vencimento_titulo Data de vencimento inicial para delimitar período da consulta. (optional)
     * @param  string $data_fim_vencimento_titulo Data de vencimento final para delimitar período da consulta. (optional)
     * @param  string $data_inicio_registro_titulo Data de registro inicial para delimitar período da consulta. (optional)
     * @param  string $data_fim_registro_titulo Data de registro final para delimitar período da consulta. (optional)
     * @param  string $horario_inicio_agendamento_titulo Hora de agendamento inicial para delimitar período da consulta. (optional)
     * @param  string $horario_fim_agendamento_titulo Hora de agendamento final para delimitar período da consulta. (optional)
     * @param  string $id_proximo_titulo Identificador do próximo título da próxima paginação a ser consultado. Somente deve ser utilizado em caso de pesquisas que retornem mais de 650 boletos. Se na resposta da primeira consulta, ou consulta anterior, o campo \&quot;possuiMaisTitulos\&quot; retorne o valor \&quot;S\&quot;, então na próxima chamada, o usuário deve informar o valor do campo \&quot;proximoTitulo\&quot; que veio na resposta, a partir do qual será iniciada nova consulta. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function boletosBaixaOperacionalAsyncWithHttpInfo($gw_dev_app_key, $authorization, $agencia, $conta, $carteira, $variacao, $data_inicio_agendamento_titulo, $data_fim_agendamento_titulo, $estado_baixa_operacional = null, $modalidade_titulo = null, $data_inicio_vencimento_titulo = null, $data_fim_vencimento_titulo = null, $data_inicio_registro_titulo = null, $data_fim_registro_titulo = null, $horario_inicio_agendamento_titulo = null, $horario_fim_agendamento_titulo = null, $id_proximo_titulo = null)
    {
        $returnType = '\Swagger\Client\Model\RespostaBoletosBaixaOperacional';
        $request = $this->boletosBaixaOperacionalRequest($gw_dev_app_key, $authorization, $agencia, $conta, $carteira, $variacao, $data_inicio_agendamento_titulo, $data_fim_agendamento_titulo, $estado_baixa_operacional, $modalidade_titulo, $data_inicio_vencimento_titulo, $data_fim_vencimento_titulo, $data_inicio_registro_titulo, $data_fim_registro_titulo, $horario_inicio_agendamento_titulo, $horario_fim_agendamento_titulo, $id_proximo_titulo);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'boletosBaixaOperacional'
     *
     * @param  string $gw_dev_app_key É a chave de acesso do aplicativo do desenvolvedor utilizada em produção, obtida no Portal do Desenvolvedor. Essa chave será usada para identificação do aplicativo.  Para os testes em ambiente de homologação, trocar por gw-app-key.  Ex: 0021239456d80136bebf005056891bed. CAMPO OBRIGATÓRIO. (required)
     * @param  string $authorization É um \&quot;token\&quot; de acesso fornecido pelo OAuth 2.0. Ex: Bearer [ACCESS_TOKEN] (required)
     * @param  int $agencia Número da agência do beneficiário, sem o dígito verificador. (required)
     * @param  int $conta Número da conta do beneficiário, sem o dígito verificador. (required)
     * @param  int $carteira Número da carteira do convênio de cobrança. (required)
     * @param  int $variacao Número da variação da carteira do convênio de cobrança. (required)
     * @param  string $data_inicio_agendamento_titulo Data de agendamento inicial para delimitar período da consulta. (required)
     * @param  string $data_fim_agendamento_titulo Data de agendamento final para delimitar período da consulta. (required)
     * @param  int $estado_baixa_operacional Código para identificar o estado da baixa operacional. Domínio:1 - BAIXA OPERACIONAL BB; 2 - BAIXA OPERACIONAL OUTROS BANCOS; 10- CANCELAMENTO DE BAIXA OPERACIONAL (optional)
     * @param  int $modalidade_titulo Código para identificar a característica dos boletos dentro das modalidades de cobrança existentes no banco.  Domínio: 1 - SIMPLES 4 - VINCULADA (optional)
     * @param  string $data_inicio_vencimento_titulo Data de vencimento inicial para delimitar período da consulta. (optional)
     * @param  string $data_fim_vencimento_titulo Data de vencimento final para delimitar período da consulta. (optional)
     * @param  string $data_inicio_registro_titulo Data de registro inicial para delimitar período da consulta. (optional)
     * @param  string $data_fim_registro_titulo Data de registro final para delimitar período da consulta. (optional)
     * @param  string $horario_inicio_agendamento_titulo Hora de agendamento inicial para delimitar período da consulta. (optional)
     * @param  string $horario_fim_agendamento_titulo Hora de agendamento final para delimitar período da consulta. (optional)
     * @param  string $id_proximo_titulo Identificador do próximo título da próxima paginação a ser consultado. Somente deve ser utilizado em caso de pesquisas que retornem mais de 650 boletos. Se na resposta da primeira consulta, ou consulta anterior, o campo \&quot;possuiMaisTitulos\&quot; retorne o valor \&quot;S\&quot;, então na próxima chamada, o usuário deve informar o valor do campo \&quot;proximoTitulo\&quot; que veio na resposta, a partir do qual será iniciada nova consulta. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function boletosBaixaOperacionalRequest($gw_dev_app_key, $authorization, $agencia, $conta, $carteira, $variacao, $data_inicio_agendamento_titulo, $data_fim_agendamento_titulo, $estado_baixa_operacional = null, $modalidade_titulo = null, $data_inicio_vencimento_titulo = null, $data_fim_vencimento_titulo = null, $data_inicio_registro_titulo = null, $data_fim_registro_titulo = null, $horario_inicio_agendamento_titulo = null, $horario_fim_agendamento_titulo = null, $id_proximo_titulo = null)
    {
        // verify the required parameter 'gw_dev_app_key' is set
        if ($gw_dev_app_key === null || (is_array($gw_dev_app_key) && count($gw_dev_app_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $gw_dev_app_key when calling boletosBaixaOperacional'
            );
        }
        // verify the required parameter 'authorization' is set
        if ($authorization === null || (is_array($authorization) && count($authorization) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $authorization when calling boletosBaixaOperacional'
            );
        }
        // verify the required parameter 'agencia' is set
        if ($agencia === null || (is_array($agencia) && count($agencia) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $agencia when calling boletosBaixaOperacional'
            );
        }
        // verify the required parameter 'conta' is set
        if ($conta === null || (is_array($conta) && count($conta) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $conta when calling boletosBaixaOperacional'
            );
        }
        // verify the required parameter 'carteira' is set
        if ($carteira === null || (is_array($carteira) && count($carteira) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $carteira when calling boletosBaixaOperacional'
            );
        }
        // verify the required parameter 'variacao' is set
        if ($variacao === null || (is_array($variacao) && count($variacao) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $variacao when calling boletosBaixaOperacional'
            );
        }
        // verify the required parameter 'data_inicio_agendamento_titulo' is set
        if ($data_inicio_agendamento_titulo === null || (is_array($data_inicio_agendamento_titulo) && count($data_inicio_agendamento_titulo) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $data_inicio_agendamento_titulo when calling boletosBaixaOperacional'
            );
        }
        // verify the required parameter 'data_fim_agendamento_titulo' is set
        if ($data_fim_agendamento_titulo === null || (is_array($data_fim_agendamento_titulo) && count($data_fim_agendamento_titulo) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $data_fim_agendamento_titulo when calling boletosBaixaOperacional'
            );
        }

        $resourcePath = '/boletos-baixa-operacional';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($gw_dev_app_key !== null) {
            $queryParams['gw-dev-app-key'] = ObjectSerializer::toQueryValue($gw_dev_app_key, null);
        }
        // query params
        if ($agencia !== null) {
            $queryParams['agencia'] = ObjectSerializer::toQueryValue($agencia, 'int32');
        }
        // query params
        if ($conta !== null) {
            $queryParams['conta'] = ObjectSerializer::toQueryValue($conta, 'int64');
        }
        // query params
        if ($carteira !== null) {
            $queryParams['carteira'] = ObjectSerializer::toQueryValue($carteira, 'int32');
        }
        // query params
        if ($variacao !== null) {
            $queryParams['variacao'] = ObjectSerializer::toQueryValue($variacao, 'int32');
        }
        // query params
        if ($estado_baixa_operacional !== null) {
            $queryParams['estadoBaixaOperacional'] = ObjectSerializer::toQueryValue($estado_baixa_operacional, 'int32');
        }
        // query params
        if ($modalidade_titulo !== null) {
            $queryParams['modalidadeTitulo'] = ObjectSerializer::toQueryValue($modalidade_titulo, 'int32');
        }
        // query params
        if ($data_inicio_vencimento_titulo !== null) {
            $queryParams['dataInicioVencimentoTitulo'] = ObjectSerializer::toQueryValue($data_inicio_vencimento_titulo, null);
        }
        // query params
        if ($data_fim_vencimento_titulo !== null) {
            $queryParams['dataFimVencimentoTitulo'] = ObjectSerializer::toQueryValue($data_fim_vencimento_titulo, null);
        }
        // query params
        if ($data_inicio_registro_titulo !== null) {
            $queryParams['dataInicioRegistroTitulo'] = ObjectSerializer::toQueryValue($data_inicio_registro_titulo, null);
        }
        // query params
        if ($data_fim_registro_titulo !== null) {
            $queryParams['dataFimRegistroTitulo'] = ObjectSerializer::toQueryValue($data_fim_registro_titulo, null);
        }
        // query params
        if ($data_inicio_agendamento_titulo !== null) {
            $queryParams['dataInicioAgendamentoTitulo'] = ObjectSerializer::toQueryValue($data_inicio_agendamento_titulo, null);
        }
        // query params
        if ($data_fim_agendamento_titulo !== null) {
            $queryParams['dataFimAgendamentoTitulo'] = ObjectSerializer::toQueryValue($data_fim_agendamento_titulo, null);
        }
        // query params
        if ($horario_inicio_agendamento_titulo !== null) {
            $queryParams['horarioInicioAgendamentoTitulo'] = ObjectSerializer::toQueryValue($horario_inicio_agendamento_titulo, null);
        }
        // query params
        if ($horario_fim_agendamento_titulo !== null) {
            $queryParams['horarioFimAgendamentoTitulo'] = ObjectSerializer::toQueryValue($horario_fim_agendamento_titulo, null);
        }
        // query params
        if ($id_proximo_titulo !== null) {
            $queryParams['idProximoTitulo'] = ObjectSerializer::toQueryValue($id_proximo_titulo, null);
        }
        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = ObjectSerializer::toHeaderValue($authorization);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation cancelarPixBoletoId
     *
     * Cancelar Pix de Boleto
     *
     * @param  string $authorization É um “token” de acesso fornecido pelo OAuth 2.0.Example: Bearer [ACCESS_TOKEN] (required)
     * @param  string $gw_dev_app_key É a chave de acesso do aplicativo do desenvolvedor utilizada em produção, obtida no Portal do Desenvolvedor. Essa chave será usada para identificação do aplicativo.Para os testes em ambiente de homologação, trocar por gw-app-key. Ex: 0021239456d80136bebf005056891bed. CAMPO OBRIGATÓRIO. (required)
     * @param  string $id Número de identificação do boleto (correspondente ao NOSSO NÚMERO, numeroTituloCliente), no formato STRING, com 20 dígitos, que deverá ser formatado da seguinte forma: “000” + (número do convênio com 7 dígitos) + (10 algarismos - se necessário, completar com zeros à esquerda). Campo Obrigatório. (required)
     * @param  \Swagger\Client\Model\IdCancelarpixBody $body body (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\InlineResponse200
     */
    public function cancelarPixBoletoId($authorization, $gw_dev_app_key, $id, $body = null)
    {
        list($response) = $this->cancelarPixBoletoIdWithHttpInfo($authorization, $gw_dev_app_key, $id, $body);
        return $response;
    }

    /**
     * Operation cancelarPixBoletoIdWithHttpInfo
     *
     * Cancelar Pix de Boleto
     *
     * @param  string $authorization É um “token” de acesso fornecido pelo OAuth 2.0.Example: Bearer [ACCESS_TOKEN] (required)
     * @param  string $gw_dev_app_key É a chave de acesso do aplicativo do desenvolvedor utilizada em produção, obtida no Portal do Desenvolvedor. Essa chave será usada para identificação do aplicativo.Para os testes em ambiente de homologação, trocar por gw-app-key. Ex: 0021239456d80136bebf005056891bed. CAMPO OBRIGATÓRIO. (required)
     * @param  string $id Número de identificação do boleto (correspondente ao NOSSO NÚMERO, numeroTituloCliente), no formato STRING, com 20 dígitos, que deverá ser formatado da seguinte forma: “000” + (número do convênio com 7 dígitos) + (10 algarismos - se necessário, completar com zeros à esquerda). Campo Obrigatório. (required)
     * @param  \Swagger\Client\Model\IdCancelarpixBody $body (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\InlineResponse200, HTTP status code, HTTP response headers (array of strings)
     */
    public function cancelarPixBoletoIdWithHttpInfo($authorization, $gw_dev_app_key, $id, $body = null)
    {
        $returnType = '\Swagger\Client\Model\InlineResponse200';
        $request = $this->cancelarPixBoletoIdRequest($authorization, $gw_dev_app_key, $id, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\InlineResponse200',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErroV4',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErroOAuthNaoAutorizado',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErroV4',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErroV4',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation cancelarPixBoletoIdAsync
     *
     * Cancelar Pix de Boleto
     *
     * @param  string $authorization É um “token” de acesso fornecido pelo OAuth 2.0.Example: Bearer [ACCESS_TOKEN] (required)
     * @param  string $gw_dev_app_key É a chave de acesso do aplicativo do desenvolvedor utilizada em produção, obtida no Portal do Desenvolvedor. Essa chave será usada para identificação do aplicativo.Para os testes em ambiente de homologação, trocar por gw-app-key. Ex: 0021239456d80136bebf005056891bed. CAMPO OBRIGATÓRIO. (required)
     * @param  string $id Número de identificação do boleto (correspondente ao NOSSO NÚMERO, numeroTituloCliente), no formato STRING, com 20 dígitos, que deverá ser formatado da seguinte forma: “000” + (número do convênio com 7 dígitos) + (10 algarismos - se necessário, completar com zeros à esquerda). Campo Obrigatório. (required)
     * @param  \Swagger\Client\Model\IdCancelarpixBody $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cancelarPixBoletoIdAsync($authorization, $gw_dev_app_key, $id, $body = null)
    {
        return $this->cancelarPixBoletoIdAsyncWithHttpInfo($authorization, $gw_dev_app_key, $id, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cancelarPixBoletoIdAsyncWithHttpInfo
     *
     * Cancelar Pix de Boleto
     *
     * @param  string $authorization É um “token” de acesso fornecido pelo OAuth 2.0.Example: Bearer [ACCESS_TOKEN] (required)
     * @param  string $gw_dev_app_key É a chave de acesso do aplicativo do desenvolvedor utilizada em produção, obtida no Portal do Desenvolvedor. Essa chave será usada para identificação do aplicativo.Para os testes em ambiente de homologação, trocar por gw-app-key. Ex: 0021239456d80136bebf005056891bed. CAMPO OBRIGATÓRIO. (required)
     * @param  string $id Número de identificação do boleto (correspondente ao NOSSO NÚMERO, numeroTituloCliente), no formato STRING, com 20 dígitos, que deverá ser formatado da seguinte forma: “000” + (número do convênio com 7 dígitos) + (10 algarismos - se necessário, completar com zeros à esquerda). Campo Obrigatório. (required)
     * @param  \Swagger\Client\Model\IdCancelarpixBody $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cancelarPixBoletoIdAsyncWithHttpInfo($authorization, $gw_dev_app_key, $id, $body = null)
    {
        $returnType = '\Swagger\Client\Model\InlineResponse200';
        $request = $this->cancelarPixBoletoIdRequest($authorization, $gw_dev_app_key, $id, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cancelarPixBoletoId'
     *
     * @param  string $authorization É um “token” de acesso fornecido pelo OAuth 2.0.Example: Bearer [ACCESS_TOKEN] (required)
     * @param  string $gw_dev_app_key É a chave de acesso do aplicativo do desenvolvedor utilizada em produção, obtida no Portal do Desenvolvedor. Essa chave será usada para identificação do aplicativo.Para os testes em ambiente de homologação, trocar por gw-app-key. Ex: 0021239456d80136bebf005056891bed. CAMPO OBRIGATÓRIO. (required)
     * @param  string $id Número de identificação do boleto (correspondente ao NOSSO NÚMERO, numeroTituloCliente), no formato STRING, com 20 dígitos, que deverá ser formatado da seguinte forma: “000” + (número do convênio com 7 dígitos) + (10 algarismos - se necessário, completar com zeros à esquerda). Campo Obrigatório. (required)
     * @param  \Swagger\Client\Model\IdCancelarpixBody $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function cancelarPixBoletoIdRequest($authorization, $gw_dev_app_key, $id, $body = null)
    {
        // verify the required parameter 'authorization' is set
        if ($authorization === null || (is_array($authorization) && count($authorization) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $authorization when calling cancelarPixBoletoId'
            );
        }
        // verify the required parameter 'gw_dev_app_key' is set
        if ($gw_dev_app_key === null || (is_array($gw_dev_app_key) && count($gw_dev_app_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $gw_dev_app_key when calling cancelarPixBoletoId'
            );
        }
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling cancelarPixBoletoId'
            );
        }

        $resourcePath = '/boletos/{id}/cancelar-pix';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($gw_dev_app_key !== null) {
            $queryParams['gw-dev-app-key'] = ObjectSerializer::toQueryValue($gw_dev_app_key, null);
        }
        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = ObjectSerializer::toHeaderValue($authorization);
        }

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation consultarPixBoletoId
     *
     * Consultar Pix de Boleto
     *
     * @param  string $id Número de identificação do boleto (correspondente ao NOSSO NÚMERO, numeroTituloCliente), no formato STRING, com 20 dígitos, que deverá ser formatado da seguinte forma:  “000” +  (número do convênio com 7 dígitos) + (10 algarismos - se necessário, completar com zeros à esquerda). Campo Obrigatório. (required)
     * @param  string $gw_dev_app_key É a chave de acesso do aplicativo do desenvolvedor utilizada em produção, obtida no Portal do Desenvolvedor. Essa chave será usada para identificação do aplicativo.  Para os testes em ambiente de homologação, trocar por gw-app-key.  Ex: 0021239456d80136bebf005056891bed. CAMPO OBRIGATÓRIO. (required)
     * @param  string $authorization É um “token” de acesso fornecido pelo OAuth 2.0.    Example: Bearer [ACCESS_TOKEN] (required)
     * @param  float $numero_convenio Número do convênio de Cobrança do Cliente (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\RespostaConsultaPixBoleto
     */
    public function consultarPixBoletoId($id, $gw_dev_app_key, $authorization, $numero_convenio)
    {
        list($response) = $this->consultarPixBoletoIdWithHttpInfo($id, $gw_dev_app_key, $authorization, $numero_convenio);
        return $response;
    }

    /**
     * Operation consultarPixBoletoIdWithHttpInfo
     *
     * Consultar Pix de Boleto
     *
     * @param  string $id Número de identificação do boleto (correspondente ao NOSSO NÚMERO, numeroTituloCliente), no formato STRING, com 20 dígitos, que deverá ser formatado da seguinte forma:  “000” +  (número do convênio com 7 dígitos) + (10 algarismos - se necessário, completar com zeros à esquerda). Campo Obrigatório. (required)
     * @param  string $gw_dev_app_key É a chave de acesso do aplicativo do desenvolvedor utilizada em produção, obtida no Portal do Desenvolvedor. Essa chave será usada para identificação do aplicativo.  Para os testes em ambiente de homologação, trocar por gw-app-key.  Ex: 0021239456d80136bebf005056891bed. CAMPO OBRIGATÓRIO. (required)
     * @param  string $authorization É um “token” de acesso fornecido pelo OAuth 2.0.    Example: Bearer [ACCESS_TOKEN] (required)
     * @param  float $numero_convenio Número do convênio de Cobrança do Cliente (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\RespostaConsultaPixBoleto, HTTP status code, HTTP response headers (array of strings)
     */
    public function consultarPixBoletoIdWithHttpInfo($id, $gw_dev_app_key, $authorization, $numero_convenio)
    {
        $returnType = '\Swagger\Client\Model\RespostaConsultaPixBoleto';
        $request = $this->consultarPixBoletoIdRequest($id, $gw_dev_app_key, $authorization, $numero_convenio);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\RespostaConsultaPixBoleto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErroV4',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErroOAuthNaoAutorizado',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErroV4',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation consultarPixBoletoIdAsync
     *
     * Consultar Pix de Boleto
     *
     * @param  string $id Número de identificação do boleto (correspondente ao NOSSO NÚMERO, numeroTituloCliente), no formato STRING, com 20 dígitos, que deverá ser formatado da seguinte forma:  “000” +  (número do convênio com 7 dígitos) + (10 algarismos - se necessário, completar com zeros à esquerda). Campo Obrigatório. (required)
     * @param  string $gw_dev_app_key É a chave de acesso do aplicativo do desenvolvedor utilizada em produção, obtida no Portal do Desenvolvedor. Essa chave será usada para identificação do aplicativo.  Para os testes em ambiente de homologação, trocar por gw-app-key.  Ex: 0021239456d80136bebf005056891bed. CAMPO OBRIGATÓRIO. (required)
     * @param  string $authorization É um “token” de acesso fornecido pelo OAuth 2.0.    Example: Bearer [ACCESS_TOKEN] (required)
     * @param  float $numero_convenio Número do convênio de Cobrança do Cliente (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function consultarPixBoletoIdAsync($id, $gw_dev_app_key, $authorization, $numero_convenio)
    {
        return $this->consultarPixBoletoIdAsyncWithHttpInfo($id, $gw_dev_app_key, $authorization, $numero_convenio)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation consultarPixBoletoIdAsyncWithHttpInfo
     *
     * Consultar Pix de Boleto
     *
     * @param  string $id Número de identificação do boleto (correspondente ao NOSSO NÚMERO, numeroTituloCliente), no formato STRING, com 20 dígitos, que deverá ser formatado da seguinte forma:  “000” +  (número do convênio com 7 dígitos) + (10 algarismos - se necessário, completar com zeros à esquerda). Campo Obrigatório. (required)
     * @param  string $gw_dev_app_key É a chave de acesso do aplicativo do desenvolvedor utilizada em produção, obtida no Portal do Desenvolvedor. Essa chave será usada para identificação do aplicativo.  Para os testes em ambiente de homologação, trocar por gw-app-key.  Ex: 0021239456d80136bebf005056891bed. CAMPO OBRIGATÓRIO. (required)
     * @param  string $authorization É um “token” de acesso fornecido pelo OAuth 2.0.    Example: Bearer [ACCESS_TOKEN] (required)
     * @param  float $numero_convenio Número do convênio de Cobrança do Cliente (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function consultarPixBoletoIdAsyncWithHttpInfo($id, $gw_dev_app_key, $authorization, $numero_convenio)
    {
        $returnType = '\Swagger\Client\Model\RespostaConsultaPixBoleto';
        $request = $this->consultarPixBoletoIdRequest($id, $gw_dev_app_key, $authorization, $numero_convenio);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'consultarPixBoletoId'
     *
     * @param  string $id Número de identificação do boleto (correspondente ao NOSSO NÚMERO, numeroTituloCliente), no formato STRING, com 20 dígitos, que deverá ser formatado da seguinte forma:  “000” +  (número do convênio com 7 dígitos) + (10 algarismos - se necessário, completar com zeros à esquerda). Campo Obrigatório. (required)
     * @param  string $gw_dev_app_key É a chave de acesso do aplicativo do desenvolvedor utilizada em produção, obtida no Portal do Desenvolvedor. Essa chave será usada para identificação do aplicativo.  Para os testes em ambiente de homologação, trocar por gw-app-key.  Ex: 0021239456d80136bebf005056891bed. CAMPO OBRIGATÓRIO. (required)
     * @param  string $authorization É um “token” de acesso fornecido pelo OAuth 2.0.    Example: Bearer [ACCESS_TOKEN] (required)
     * @param  float $numero_convenio Número do convênio de Cobrança do Cliente (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function consultarPixBoletoIdRequest($id, $gw_dev_app_key, $authorization, $numero_convenio)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling consultarPixBoletoId'
            );
        }
        // verify the required parameter 'gw_dev_app_key' is set
        if ($gw_dev_app_key === null || (is_array($gw_dev_app_key) && count($gw_dev_app_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $gw_dev_app_key when calling consultarPixBoletoId'
            );
        }
        // verify the required parameter 'authorization' is set
        if ($authorization === null || (is_array($authorization) && count($authorization) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $authorization when calling consultarPixBoletoId'
            );
        }
        // verify the required parameter 'numero_convenio' is set
        if ($numero_convenio === null || (is_array($numero_convenio) && count($numero_convenio) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $numero_convenio when calling consultarPixBoletoId'
            );
        }

        $resourcePath = '/boletos/{id}/pix';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($gw_dev_app_key !== null) {
            $queryParams['gw-dev-app-key'] = ObjectSerializer::toQueryValue($gw_dev_app_key, null);
        }
        // query params
        if ($numero_convenio !== null) {
            $queryParams['numeroConvenio'] = ObjectSerializer::toQueryValue($numero_convenio, null);
        }
        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = ObjectSerializer::toHeaderValue($authorization);
        }

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation detalhaBoletoBancarioId
     *
     * Detalha um boleto bancário
     *
     * @param  string $id Número do título de cobrança. (required)
     * @param  string $gw_dev_app_key É a chave de acesso do aplicativo do desenvolvedor utilizada em produção, obtida no Portal do Desenvolvedor. Essa chave será usada para identificação do aplicativo.  Para os testes em ambiente de homologação, trocar por gw-app-key.  Ex: 0021239456d80136bebf005056891bed. CAMPO OBRIGATÓRIO. (required)
     * @param  string $authorization É um “token” de acesso fornecido pelo OAuth 2.0.    Example: Bearer [ACCESS_TOKEN] (required)
     * @param  float $numero_convenio Número do convênio. (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\RespostaDetalhamentoBoleto
     */
    public function detalhaBoletoBancarioId($id, $gw_dev_app_key, $authorization, $numero_convenio)
    {
        list($response) = $this->detalhaBoletoBancarioIdWithHttpInfo($id, $gw_dev_app_key, $authorization, $numero_convenio);
        return $response;
    }

    /**
     * Operation detalhaBoletoBancarioIdWithHttpInfo
     *
     * Detalha um boleto bancário
     *
     * @param  string $id Número do título de cobrança. (required)
     * @param  string $gw_dev_app_key É a chave de acesso do aplicativo do desenvolvedor utilizada em produção, obtida no Portal do Desenvolvedor. Essa chave será usada para identificação do aplicativo.  Para os testes em ambiente de homologação, trocar por gw-app-key.  Ex: 0021239456d80136bebf005056891bed. CAMPO OBRIGATÓRIO. (required)
     * @param  string $authorization É um “token” de acesso fornecido pelo OAuth 2.0.    Example: Bearer [ACCESS_TOKEN] (required)
     * @param  float $numero_convenio Número do convênio. (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\RespostaDetalhamentoBoleto, HTTP status code, HTTP response headers (array of strings)
     */
    public function detalhaBoletoBancarioIdWithHttpInfo($id, $gw_dev_app_key, $authorization, $numero_convenio)
    {
        $returnType = '\Swagger\Client\Model\RespostaDetalhamentoBoleto';
        $request = $this->detalhaBoletoBancarioIdRequest($id, $gw_dev_app_key, $authorization, $numero_convenio);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\RespostaDetalhamentoBoleto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\Erro',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErroOAuthNaoAutorizado',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\Erro',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation detalhaBoletoBancarioIdAsync
     *
     * Detalha um boleto bancário
     *
     * @param  string $id Número do título de cobrança. (required)
     * @param  string $gw_dev_app_key É a chave de acesso do aplicativo do desenvolvedor utilizada em produção, obtida no Portal do Desenvolvedor. Essa chave será usada para identificação do aplicativo.  Para os testes em ambiente de homologação, trocar por gw-app-key.  Ex: 0021239456d80136bebf005056891bed. CAMPO OBRIGATÓRIO. (required)
     * @param  string $authorization É um “token” de acesso fornecido pelo OAuth 2.0.    Example: Bearer [ACCESS_TOKEN] (required)
     * @param  float $numero_convenio Número do convênio. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function detalhaBoletoBancarioIdAsync($id, $gw_dev_app_key, $authorization, $numero_convenio)
    {
        return $this->detalhaBoletoBancarioIdAsyncWithHttpInfo($id, $gw_dev_app_key, $authorization, $numero_convenio)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation detalhaBoletoBancarioIdAsyncWithHttpInfo
     *
     * Detalha um boleto bancário
     *
     * @param  string $id Número do título de cobrança. (required)
     * @param  string $gw_dev_app_key É a chave de acesso do aplicativo do desenvolvedor utilizada em produção, obtida no Portal do Desenvolvedor. Essa chave será usada para identificação do aplicativo.  Para os testes em ambiente de homologação, trocar por gw-app-key.  Ex: 0021239456d80136bebf005056891bed. CAMPO OBRIGATÓRIO. (required)
     * @param  string $authorization É um “token” de acesso fornecido pelo OAuth 2.0.    Example: Bearer [ACCESS_TOKEN] (required)
     * @param  float $numero_convenio Número do convênio. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function detalhaBoletoBancarioIdAsyncWithHttpInfo($id, $gw_dev_app_key, $authorization, $numero_convenio)
    {
        $returnType = '\Swagger\Client\Model\RespostaDetalhamentoBoleto';
        $request = $this->detalhaBoletoBancarioIdRequest($id, $gw_dev_app_key, $authorization, $numero_convenio);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'detalhaBoletoBancarioId'
     *
     * @param  string $id Número do título de cobrança. (required)
     * @param  string $gw_dev_app_key É a chave de acesso do aplicativo do desenvolvedor utilizada em produção, obtida no Portal do Desenvolvedor. Essa chave será usada para identificação do aplicativo.  Para os testes em ambiente de homologação, trocar por gw-app-key.  Ex: 0021239456d80136bebf005056891bed. CAMPO OBRIGATÓRIO. (required)
     * @param  string $authorization É um “token” de acesso fornecido pelo OAuth 2.0.    Example: Bearer [ACCESS_TOKEN] (required)
     * @param  float $numero_convenio Número do convênio. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function detalhaBoletoBancarioIdRequest($id, $gw_dev_app_key, $authorization, $numero_convenio)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling detalhaBoletoBancarioId'
            );
        }
        // verify the required parameter 'gw_dev_app_key' is set
        if ($gw_dev_app_key === null || (is_array($gw_dev_app_key) && count($gw_dev_app_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $gw_dev_app_key when calling detalhaBoletoBancarioId'
            );
        }
        // verify the required parameter 'authorization' is set
        if ($authorization === null || (is_array($authorization) && count($authorization) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $authorization when calling detalhaBoletoBancarioId'
            );
        }
        // verify the required parameter 'numero_convenio' is set
        if ($numero_convenio === null || (is_array($numero_convenio) && count($numero_convenio) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $numero_convenio when calling detalhaBoletoBancarioId'
            );
        }

        $resourcePath = '/boletos/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($gw_dev_app_key !== null) {
            $queryParams['gw-dev-app-key'] = ObjectSerializer::toQueryValue($gw_dev_app_key, null);
        }
        // query params
        if ($numero_convenio !== null) {
            $queryParams['numeroConvenio'] = ObjectSerializer::toQueryValue($numero_convenio, null);
        }
        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = ObjectSerializer::toHeaderValue($authorization);
        }

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation gerarPixBoletoId
     *
     * Gerar Pix de Boleto
     *
     * @param  string $authorization É um “token” de acesso fornecido pelo OAuth 2.0.Example: Bearer [ACCESS_TOKEN] (required)
     * @param  string $gw_dev_app_key É a chave de acesso do aplicativo do desenvolvedor utilizada em produção, obtida no Portal do Desenvolvedor. Essa chave será usada para identificação do aplicativo.Para os testes em ambiente de homologação, trocar por gw-app-key. Ex: 0021239456d80136bebf005056891bed. CAMPO OBRIGATÓRIO. (required)
     * @param  string $id Número de identificação do boleto (correspondente ao NOSSO NÚMERO, numeroTituloCliente), no formato STRING, com 20 dígitos, que deverá ser formatado da seguinte forma: “000” + (número do convênio com 7 dígitos) + (10 algarismos - se necessário, completar com zeros à esquerda). Campo Obrigatório. (required)
     * @param  \Swagger\Client\Model\IdGerarpixBody $body body (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\InlineResponse200
     */
    public function gerarPixBoletoId($authorization, $gw_dev_app_key, $id, $body = null)
    {
        list($response) = $this->gerarPixBoletoIdWithHttpInfo($authorization, $gw_dev_app_key, $id, $body);
        return $response;
    }

    /**
     * Operation gerarPixBoletoIdWithHttpInfo
     *
     * Gerar Pix de Boleto
     *
     * @param  string $authorization É um “token” de acesso fornecido pelo OAuth 2.0.Example: Bearer [ACCESS_TOKEN] (required)
     * @param  string $gw_dev_app_key É a chave de acesso do aplicativo do desenvolvedor utilizada em produção, obtida no Portal do Desenvolvedor. Essa chave será usada para identificação do aplicativo.Para os testes em ambiente de homologação, trocar por gw-app-key. Ex: 0021239456d80136bebf005056891bed. CAMPO OBRIGATÓRIO. (required)
     * @param  string $id Número de identificação do boleto (correspondente ao NOSSO NÚMERO, numeroTituloCliente), no formato STRING, com 20 dígitos, que deverá ser formatado da seguinte forma: “000” + (número do convênio com 7 dígitos) + (10 algarismos - se necessário, completar com zeros à esquerda). Campo Obrigatório. (required)
     * @param  \Swagger\Client\Model\IdGerarpixBody $body (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\InlineResponse200, HTTP status code, HTTP response headers (array of strings)
     */
    public function gerarPixBoletoIdWithHttpInfo($authorization, $gw_dev_app_key, $id, $body = null)
    {
        $returnType = '\Swagger\Client\Model\InlineResponse200';
        $request = $this->gerarPixBoletoIdRequest($authorization, $gw_dev_app_key, $id, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\InlineResponse200',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErroV4',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErroOAuthNaoAutorizado',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErroV4',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErroV4',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation gerarPixBoletoIdAsync
     *
     * Gerar Pix de Boleto
     *
     * @param  string $authorization É um “token” de acesso fornecido pelo OAuth 2.0.Example: Bearer [ACCESS_TOKEN] (required)
     * @param  string $gw_dev_app_key É a chave de acesso do aplicativo do desenvolvedor utilizada em produção, obtida no Portal do Desenvolvedor. Essa chave será usada para identificação do aplicativo.Para os testes em ambiente de homologação, trocar por gw-app-key. Ex: 0021239456d80136bebf005056891bed. CAMPO OBRIGATÓRIO. (required)
     * @param  string $id Número de identificação do boleto (correspondente ao NOSSO NÚMERO, numeroTituloCliente), no formato STRING, com 20 dígitos, que deverá ser formatado da seguinte forma: “000” + (número do convênio com 7 dígitos) + (10 algarismos - se necessário, completar com zeros à esquerda). Campo Obrigatório. (required)
     * @param  \Swagger\Client\Model\IdGerarpixBody $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gerarPixBoletoIdAsync($authorization, $gw_dev_app_key, $id, $body = null)
    {
        return $this->gerarPixBoletoIdAsyncWithHttpInfo($authorization, $gw_dev_app_key, $id, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation gerarPixBoletoIdAsyncWithHttpInfo
     *
     * Gerar Pix de Boleto
     *
     * @param  string $authorization É um “token” de acesso fornecido pelo OAuth 2.0.Example: Bearer [ACCESS_TOKEN] (required)
     * @param  string $gw_dev_app_key É a chave de acesso do aplicativo do desenvolvedor utilizada em produção, obtida no Portal do Desenvolvedor. Essa chave será usada para identificação do aplicativo.Para os testes em ambiente de homologação, trocar por gw-app-key. Ex: 0021239456d80136bebf005056891bed. CAMPO OBRIGATÓRIO. (required)
     * @param  string $id Número de identificação do boleto (correspondente ao NOSSO NÚMERO, numeroTituloCliente), no formato STRING, com 20 dígitos, que deverá ser formatado da seguinte forma: “000” + (número do convênio com 7 dígitos) + (10 algarismos - se necessário, completar com zeros à esquerda). Campo Obrigatório. (required)
     * @param  \Swagger\Client\Model\IdGerarpixBody $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gerarPixBoletoIdAsyncWithHttpInfo($authorization, $gw_dev_app_key, $id, $body = null)
    {
        $returnType = '\Swagger\Client\Model\InlineResponse200';
        $request = $this->gerarPixBoletoIdRequest($authorization, $gw_dev_app_key, $id, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'gerarPixBoletoId'
     *
     * @param  string $authorization É um “token” de acesso fornecido pelo OAuth 2.0.Example: Bearer [ACCESS_TOKEN] (required)
     * @param  string $gw_dev_app_key É a chave de acesso do aplicativo do desenvolvedor utilizada em produção, obtida no Portal do Desenvolvedor. Essa chave será usada para identificação do aplicativo.Para os testes em ambiente de homologação, trocar por gw-app-key. Ex: 0021239456d80136bebf005056891bed. CAMPO OBRIGATÓRIO. (required)
     * @param  string $id Número de identificação do boleto (correspondente ao NOSSO NÚMERO, numeroTituloCliente), no formato STRING, com 20 dígitos, que deverá ser formatado da seguinte forma: “000” + (número do convênio com 7 dígitos) + (10 algarismos - se necessário, completar com zeros à esquerda). Campo Obrigatório. (required)
     * @param  \Swagger\Client\Model\IdGerarpixBody $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function gerarPixBoletoIdRequest($authorization, $gw_dev_app_key, $id, $body = null)
    {
        // verify the required parameter 'authorization' is set
        if ($authorization === null || (is_array($authorization) && count($authorization) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $authorization when calling gerarPixBoletoId'
            );
        }
        // verify the required parameter 'gw_dev_app_key' is set
        if ($gw_dev_app_key === null || (is_array($gw_dev_app_key) && count($gw_dev_app_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $gw_dev_app_key when calling gerarPixBoletoId'
            );
        }
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling gerarPixBoletoId'
            );
        }

        $resourcePath = '/boletos/{id}/gerar-pix';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($gw_dev_app_key !== null) {
            $queryParams['gw-dev-app-key'] = ObjectSerializer::toQueryValue($gw_dev_app_key, null);
        }
        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = ObjectSerializer::toHeaderValue($authorization);
        }

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation incluiBoletoBancarioId
     *
     * Registra Boleto de Cobrança
     *
     * @param  \Swagger\Client\Model\RequisicaoRegistroBoletos $body body (required)
     * @param  string $authorization É um \&quot;token\&quot; de acesso fornecido pelo OAuth 2.0. Ex: Bearer [ACCESS_TOKEN] (required)
     * @param  string $gw_dev_app_key É a chave de acesso do aplicativo do desenvolvedor utilizada em produção, obtida no Portal do Desenvolvedor. Essa chave será usada para identificação do aplicativo.  Para os testes em ambiente de homologação, trocar por gw-app-key.  Ex: 0021239456d80136bebf005056891bed. CAMPO OBRIGATÓRIO. (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\RespostaRegistroBoletos
     */
    public function incluiBoletoBancarioId($body, $authorization, $gw_dev_app_key)
    {
        list($response) = $this->incluiBoletoBancarioIdWithHttpInfo($body, $authorization, $gw_dev_app_key);
        return $response;
    }

    /**
     * Operation incluiBoletoBancarioIdWithHttpInfo
     *
     * Registra Boleto de Cobrança
     *
     * @param  \Swagger\Client\Model\RequisicaoRegistroBoletos $body (required)
     * @param  string $authorization É um \&quot;token\&quot; de acesso fornecido pelo OAuth 2.0. Ex: Bearer [ACCESS_TOKEN] (required)
     * @param  string $gw_dev_app_key É a chave de acesso do aplicativo do desenvolvedor utilizada em produção, obtida no Portal do Desenvolvedor. Essa chave será usada para identificação do aplicativo.  Para os testes em ambiente de homologação, trocar por gw-app-key.  Ex: 0021239456d80136bebf005056891bed. CAMPO OBRIGATÓRIO. (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\RespostaRegistroBoletos, HTTP status code, HTTP response headers (array of strings)
     */
    public function incluiBoletoBancarioIdWithHttpInfo($body, $authorization, $gw_dev_app_key)
    {
        $returnType = '\Swagger\Client\Model\RespostaRegistroBoletos';
        $request = $this->incluiBoletoBancarioIdRequest($body, $authorization, $gw_dev_app_key);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\RespostaRegistroBoletos',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErroV4',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErroOAuthNaoAutorizado',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErroV4',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErroV4',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation incluiBoletoBancarioIdAsync
     *
     * Registra Boleto de Cobrança
     *
     * @param  \Swagger\Client\Model\RequisicaoRegistroBoletos $body (required)
     * @param  string $authorization É um \&quot;token\&quot; de acesso fornecido pelo OAuth 2.0. Ex: Bearer [ACCESS_TOKEN] (required)
     * @param  string $gw_dev_app_key É a chave de acesso do aplicativo do desenvolvedor utilizada em produção, obtida no Portal do Desenvolvedor. Essa chave será usada para identificação do aplicativo.  Para os testes em ambiente de homologação, trocar por gw-app-key.  Ex: 0021239456d80136bebf005056891bed. CAMPO OBRIGATÓRIO. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function incluiBoletoBancarioIdAsync($body, $authorization, $gw_dev_app_key)
    {
        return $this->incluiBoletoBancarioIdAsyncWithHttpInfo($body, $authorization, $gw_dev_app_key)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation incluiBoletoBancarioIdAsyncWithHttpInfo
     *
     * Registra Boleto de Cobrança
     *
     * @param  \Swagger\Client\Model\RequisicaoRegistroBoletos $body (required)
     * @param  string $authorization É um \&quot;token\&quot; de acesso fornecido pelo OAuth 2.0. Ex: Bearer [ACCESS_TOKEN] (required)
     * @param  string $gw_dev_app_key É a chave de acesso do aplicativo do desenvolvedor utilizada em produção, obtida no Portal do Desenvolvedor. Essa chave será usada para identificação do aplicativo.  Para os testes em ambiente de homologação, trocar por gw-app-key.  Ex: 0021239456d80136bebf005056891bed. CAMPO OBRIGATÓRIO. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function incluiBoletoBancarioIdAsyncWithHttpInfo($body, $authorization, $gw_dev_app_key)
    {
        $returnType = '\Swagger\Client\Model\RespostaRegistroBoletos';
        $request = $this->incluiBoletoBancarioIdRequest($body, $authorization, $gw_dev_app_key);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'incluiBoletoBancarioId'
     *
     * @param  \Swagger\Client\Model\RequisicaoRegistroBoletos $body (required)
     * @param  string $authorization É um \&quot;token\&quot; de acesso fornecido pelo OAuth 2.0. Ex: Bearer [ACCESS_TOKEN] (required)
     * @param  string $gw_dev_app_key É a chave de acesso do aplicativo do desenvolvedor utilizada em produção, obtida no Portal do Desenvolvedor. Essa chave será usada para identificação do aplicativo.  Para os testes em ambiente de homologação, trocar por gw-app-key.  Ex: 0021239456d80136bebf005056891bed. CAMPO OBRIGATÓRIO. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function incluiBoletoBancarioIdRequest($body, $authorization, $gw_dev_app_key)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling incluiBoletoBancarioId'
            );
        }
        // verify the required parameter 'authorization' is set
        if ($authorization === null || (is_array($authorization) && count($authorization) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $authorization when calling incluiBoletoBancarioId'
            );
        }
        // verify the required parameter 'gw_dev_app_key' is set
        if ($gw_dev_app_key === null || (is_array($gw_dev_app_key) && count($gw_dev_app_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $gw_dev_app_key when calling incluiBoletoBancarioId'
            );
        }

        $resourcePath = '/boletos';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($gw_dev_app_key !== null) {
            $queryParams['gw-dev-app-key'] = ObjectSerializer::toQueryValue($gw_dev_app_key, null);
        }
        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = ObjectSerializer::toHeaderValue($authorization);
        }


        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/xml'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation listaBoletosId
     *
     * Lista Boletos
     *
     * @param  string $gw_dev_app_key É a chave de acesso do aplicativo do desenvolvedor utilizada em produção, obtida no Portal do Desenvolvedor. Essa chave será usada para identificação do aplicativo.  Para os testes em ambiente de homologação, trocar por gw-app-key.  Ex: 0021239456d80136bebf005056891bed. CAMPO OBRIGATÓRIO. (required)
     * @param  string $authorization É um \&quot;token\&quot; de acesso fornecido pelo OAuth 2.0. Ex: Bearer [ACCESS_TOKEN] (required)
     * @param  string $indicador_situacao Situação do boleto. Campo obrigatoriamente MAIÚSCULO. Domínios: A - Em ser B - Baixados/Protestados/Liquidados (required)
     * @param  int $agencia_beneficiario Número da agência do beneficiário, sem o dígito verificador. Ex: 452. CAMPO OBRIGATÓRIO. (required)
     * @param  int $conta_beneficiario Número da conta do beneficiário, sem o dígito verificador. Ex: 123873. CAMPO OBRIGATÓRIO. (required)
     * @param  int $conta_caucao Número da conta caução.  Domínio: 1 - Compõe Garantia; 2 - Não Compõe Garantia; 4 - Não Compõe Garantia (vencimento superior a 180 dias); 5 - Não Compõe Garantia (Vedado); 6 - Em análise; 7 - Em análise; 8 - Não Compõe Garantia. (optional)
     * @param  int $carteira_convenio Número da carteira do convênio de cobrança. Ex: 17 (optional)
     * @param  int $variacao_carteira_convenio Número da variação da carteira do convênio de cobrança. Ex: 35 (optional)
     * @param  int $modalidade_cobranca Código para identificar a característica dos boletos dentro das modalidades de cobrança existentes no BB. Domínio: 1 - SIMPLES COM REGISTRO 2 - SIMPLES SEM REGISTRO 4 - VINCULADA 6 - DESCONTADA 8 - FINANCIADA VENDOR (optional)
     * @param  int $cnpj_pagador CNPJ do pagador Ex: 123456789012 (optional)
     * @param  int $digito_cnpj_pagador Dígito verificador do CNPJ do pagador Ex: 12 (optional)
     * @param  int $cpf_pagador CPF do pagador sem o dígito. Ex: 711285901 (optional)
     * @param  int $digito_cpf_pagador Dígito verificador do CPF do pagador. Ex: 82 (optional)
     * @param  string $data_inicio_vencimento Data inicial de vencimento do boleto que delimita o período da consulta. Campo não obrigatório. Se informado Data Início, deixando em branco a Data Fim, o sistema deve assumir a data atual como Data Fim. Ex: 22.04.2020 (optional)
     * @param  string $data_fim_vencimento Data final de vencimento do boleto que delimita o período da consulta - deverá ser maior que a data de início. Campo não obrigatório. Se informado, deverá ser preenchido dataInicioVencimento. Ex: 28.04.2020 (optional)
     * @param  string $data_inicio_registro Data inicial do registro do boleto que delimita o período da consulta. Ex: 22.04.2020 (optional)
     * @param  string $data_fim_registro Data final do registro do boleto que delimita o período da consulta - deverá ser maior que a data de início. Campo não obrigatório. Se informado, deverá ser preenchido dataInicioRegistro. Ex: 28.04.2020 (optional)
     * @param  string $data_inicio_movimento Delimita o período da consulta  de boletos liquidados, baixados ou protestados, caso seja informado, no campo codigoEstadoTituloCobranca os códigos 05, 06, 07 ou 09. Ex: 22.04.2020 (optional)
     * @param  string $data_fim_movimento Data final do movimento que delimita o período da consulta  de boletos liquidados, baixados ou protestados, caso seja informado, no campo codigoEstadoTituloCobranca os códigos 05, 06, 07 ou 09. Data fim deverá ser maior que a data de início. Campo não obrigatório. Se informado, deverá ser preenchido dataInicioMovimento. Ex: 28.04.2020 (optional)
     * @param  int $codigo_estado_titulo_cobranca Código da situação atual do boleto.   Domínios:  01 - NORMAL 02 - MOVIMENTO CARTORIO 03 - EM CARTORIO 04 - TITULO COM OCORRENCIA DE CARTORIO 05 - PROTESTADO ELETRONICO 06 - LIQUIDADO 07 - BAIXADO 08 - TITULO COM PENDENCIA DE CARTORIO 09 - TITULO PROTESTADO MANUAL 10 - TITULO BAIXADO/PAGO EM CARTORIO 11 - TITULO LIQUIDADO/PROTESTADO 12 - TITULO LIQUID/PGCRTO 13 - TITULO PROTESTADO AGUARDANDO BAIXA 14 - TITULO EM LIQUIDACAO 15 - TITULO AGENDADO 16 - TITULO CREDITADO 17 - PAGO EM CHEQUE - AGUARD.LIQUIDACAO 18 - PAGO PARCIALMENTE CREDITADO 80 - EM PROCESSAMENTO (ESTADO TRANSITÓRIO) (optional)
     * @param  string $boleto_vencido Indica se o Boleto está vencido ou não. Campo obrigatoriamente MAIÚSCULO. Domínio: S para boletos vencidos N para boletos não vencidos (optional)
     * @param  int $indice Somente deve ser utilizado em caso de pesquisas que retornem mais de 300 boletos. Caso o campo RPST \&quot;Indicador Continuidade\&quot; retorne com o valor \&quot;S\&quot;, o usuário deve informar o conteúdo do campo RPST \&quot;Numero Ultimo Registro\&quot; a partir do qual será iniciada nova consulta. (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\RespostaListaBoletos[]
     */
    public function listaBoletosId($gw_dev_app_key, $authorization, $indicador_situacao, $agencia_beneficiario, $conta_beneficiario, $conta_caucao = null, $carteira_convenio = null, $variacao_carteira_convenio = null, $modalidade_cobranca = null, $cnpj_pagador = null, $digito_cnpj_pagador = null, $cpf_pagador = null, $digito_cpf_pagador = null, $data_inicio_vencimento = null, $data_fim_vencimento = null, $data_inicio_registro = null, $data_fim_registro = null, $data_inicio_movimento = null, $data_fim_movimento = null, $codigo_estado_titulo_cobranca = null, $boleto_vencido = null, $indice = null)
    {
        list($response) = $this->listaBoletosIdWithHttpInfo($gw_dev_app_key, $authorization, $indicador_situacao, $agencia_beneficiario, $conta_beneficiario, $conta_caucao, $carteira_convenio, $variacao_carteira_convenio, $modalidade_cobranca, $cnpj_pagador, $digito_cnpj_pagador, $cpf_pagador, $digito_cpf_pagador, $data_inicio_vencimento, $data_fim_vencimento, $data_inicio_registro, $data_fim_registro, $data_inicio_movimento, $data_fim_movimento, $codigo_estado_titulo_cobranca, $boleto_vencido, $indice);
        return $response;
    }

    /**
     * Operation listaBoletosIdWithHttpInfo
     *
     * Lista Boletos
     *
     * @param  string $gw_dev_app_key É a chave de acesso do aplicativo do desenvolvedor utilizada em produção, obtida no Portal do Desenvolvedor. Essa chave será usada para identificação do aplicativo.  Para os testes em ambiente de homologação, trocar por gw-app-key.  Ex: 0021239456d80136bebf005056891bed. CAMPO OBRIGATÓRIO. (required)
     * @param  string $authorization É um \&quot;token\&quot; de acesso fornecido pelo OAuth 2.0. Ex: Bearer [ACCESS_TOKEN] (required)
     * @param  string $indicador_situacao Situação do boleto. Campo obrigatoriamente MAIÚSCULO. Domínios: A - Em ser B - Baixados/Protestados/Liquidados (required)
     * @param  int $agencia_beneficiario Número da agência do beneficiário, sem o dígito verificador. Ex: 452. CAMPO OBRIGATÓRIO. (required)
     * @param  int $conta_beneficiario Número da conta do beneficiário, sem o dígito verificador. Ex: 123873. CAMPO OBRIGATÓRIO. (required)
     * @param  int $conta_caucao Número da conta caução.  Domínio: 1 - Compõe Garantia; 2 - Não Compõe Garantia; 4 - Não Compõe Garantia (vencimento superior a 180 dias); 5 - Não Compõe Garantia (Vedado); 6 - Em análise; 7 - Em análise; 8 - Não Compõe Garantia. (optional)
     * @param  int $carteira_convenio Número da carteira do convênio de cobrança. Ex: 17 (optional)
     * @param  int $variacao_carteira_convenio Número da variação da carteira do convênio de cobrança. Ex: 35 (optional)
     * @param  int $modalidade_cobranca Código para identificar a característica dos boletos dentro das modalidades de cobrança existentes no BB. Domínio: 1 - SIMPLES COM REGISTRO 2 - SIMPLES SEM REGISTRO 4 - VINCULADA 6 - DESCONTADA 8 - FINANCIADA VENDOR (optional)
     * @param  int $cnpj_pagador CNPJ do pagador Ex: 123456789012 (optional)
     * @param  int $digito_cnpj_pagador Dígito verificador do CNPJ do pagador Ex: 12 (optional)
     * @param  int $cpf_pagador CPF do pagador sem o dígito. Ex: 711285901 (optional)
     * @param  int $digito_cpf_pagador Dígito verificador do CPF do pagador. Ex: 82 (optional)
     * @param  string $data_inicio_vencimento Data inicial de vencimento do boleto que delimita o período da consulta. Campo não obrigatório. Se informado Data Início, deixando em branco a Data Fim, o sistema deve assumir a data atual como Data Fim. Ex: 22.04.2020 (optional)
     * @param  string $data_fim_vencimento Data final de vencimento do boleto que delimita o período da consulta - deverá ser maior que a data de início. Campo não obrigatório. Se informado, deverá ser preenchido dataInicioVencimento. Ex: 28.04.2020 (optional)
     * @param  string $data_inicio_registro Data inicial do registro do boleto que delimita o período da consulta. Ex: 22.04.2020 (optional)
     * @param  string $data_fim_registro Data final do registro do boleto que delimita o período da consulta - deverá ser maior que a data de início. Campo não obrigatório. Se informado, deverá ser preenchido dataInicioRegistro. Ex: 28.04.2020 (optional)
     * @param  string $data_inicio_movimento Delimita o período da consulta  de boletos liquidados, baixados ou protestados, caso seja informado, no campo codigoEstadoTituloCobranca os códigos 05, 06, 07 ou 09. Ex: 22.04.2020 (optional)
     * @param  string $data_fim_movimento Data final do movimento que delimita o período da consulta  de boletos liquidados, baixados ou protestados, caso seja informado, no campo codigoEstadoTituloCobranca os códigos 05, 06, 07 ou 09. Data fim deverá ser maior que a data de início. Campo não obrigatório. Se informado, deverá ser preenchido dataInicioMovimento. Ex: 28.04.2020 (optional)
     * @param  int $codigo_estado_titulo_cobranca Código da situação atual do boleto.   Domínios:  01 - NORMAL 02 - MOVIMENTO CARTORIO 03 - EM CARTORIO 04 - TITULO COM OCORRENCIA DE CARTORIO 05 - PROTESTADO ELETRONICO 06 - LIQUIDADO 07 - BAIXADO 08 - TITULO COM PENDENCIA DE CARTORIO 09 - TITULO PROTESTADO MANUAL 10 - TITULO BAIXADO/PAGO EM CARTORIO 11 - TITULO LIQUIDADO/PROTESTADO 12 - TITULO LIQUID/PGCRTO 13 - TITULO PROTESTADO AGUARDANDO BAIXA 14 - TITULO EM LIQUIDACAO 15 - TITULO AGENDADO 16 - TITULO CREDITADO 17 - PAGO EM CHEQUE - AGUARD.LIQUIDACAO 18 - PAGO PARCIALMENTE CREDITADO 80 - EM PROCESSAMENTO (ESTADO TRANSITÓRIO) (optional)
     * @param  string $boleto_vencido Indica se o Boleto está vencido ou não. Campo obrigatoriamente MAIÚSCULO. Domínio: S para boletos vencidos N para boletos não vencidos (optional)
     * @param  int $indice Somente deve ser utilizado em caso de pesquisas que retornem mais de 300 boletos. Caso o campo RPST \&quot;Indicador Continuidade\&quot; retorne com o valor \&quot;S\&quot;, o usuário deve informar o conteúdo do campo RPST \&quot;Numero Ultimo Registro\&quot; a partir do qual será iniciada nova consulta. (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\RespostaListaBoletos[], HTTP status code, HTTP response headers (array of strings)
     */
    public function listaBoletosIdWithHttpInfo($gw_dev_app_key, $authorization, $indicador_situacao, $agencia_beneficiario, $conta_beneficiario, $conta_caucao = null, $carteira_convenio = null, $variacao_carteira_convenio = null, $modalidade_cobranca = null, $cnpj_pagador = null, $digito_cnpj_pagador = null, $cpf_pagador = null, $digito_cpf_pagador = null, $data_inicio_vencimento = null, $data_fim_vencimento = null, $data_inicio_registro = null, $data_fim_registro = null, $data_inicio_movimento = null, $data_fim_movimento = null, $codigo_estado_titulo_cobranca = null, $boleto_vencido = null, $indice = null)
    {
        $returnType = '\Swagger\Client\Model\RespostaListaBoletos[]';
        $request = $this->listaBoletosIdRequest($gw_dev_app_key, $authorization, $indicador_situacao, $agencia_beneficiario, $conta_beneficiario, $conta_caucao, $carteira_convenio, $variacao_carteira_convenio, $modalidade_cobranca, $cnpj_pagador, $digito_cnpj_pagador, $cpf_pagador, $digito_cpf_pagador, $data_inicio_vencimento, $data_fim_vencimento, $data_inicio_registro, $data_fim_registro, $data_inicio_movimento, $data_fim_movimento, $codigo_estado_titulo_cobranca, $boleto_vencido, $indice);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\RespostaListaBoletos[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErroV2',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErroOAuthNaoAutorizado',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErroV2',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErroV2',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation listaBoletosIdAsync
     *
     * Lista Boletos
     *
     * @param  string $gw_dev_app_key É a chave de acesso do aplicativo do desenvolvedor utilizada em produção, obtida no Portal do Desenvolvedor. Essa chave será usada para identificação do aplicativo.  Para os testes em ambiente de homologação, trocar por gw-app-key.  Ex: 0021239456d80136bebf005056891bed. CAMPO OBRIGATÓRIO. (required)
     * @param  string $authorization É um \&quot;token\&quot; de acesso fornecido pelo OAuth 2.0. Ex: Bearer [ACCESS_TOKEN] (required)
     * @param  string $indicador_situacao Situação do boleto. Campo obrigatoriamente MAIÚSCULO. Domínios: A - Em ser B - Baixados/Protestados/Liquidados (required)
     * @param  int $agencia_beneficiario Número da agência do beneficiário, sem o dígito verificador. Ex: 452. CAMPO OBRIGATÓRIO. (required)
     * @param  int $conta_beneficiario Número da conta do beneficiário, sem o dígito verificador. Ex: 123873. CAMPO OBRIGATÓRIO. (required)
     * @param  int $conta_caucao Número da conta caução.  Domínio: 1 - Compõe Garantia; 2 - Não Compõe Garantia; 4 - Não Compõe Garantia (vencimento superior a 180 dias); 5 - Não Compõe Garantia (Vedado); 6 - Em análise; 7 - Em análise; 8 - Não Compõe Garantia. (optional)
     * @param  int $carteira_convenio Número da carteira do convênio de cobrança. Ex: 17 (optional)
     * @param  int $variacao_carteira_convenio Número da variação da carteira do convênio de cobrança. Ex: 35 (optional)
     * @param  int $modalidade_cobranca Código para identificar a característica dos boletos dentro das modalidades de cobrança existentes no BB. Domínio: 1 - SIMPLES COM REGISTRO 2 - SIMPLES SEM REGISTRO 4 - VINCULADA 6 - DESCONTADA 8 - FINANCIADA VENDOR (optional)
     * @param  int $cnpj_pagador CNPJ do pagador Ex: 123456789012 (optional)
     * @param  int $digito_cnpj_pagador Dígito verificador do CNPJ do pagador Ex: 12 (optional)
     * @param  int $cpf_pagador CPF do pagador sem o dígito. Ex: 711285901 (optional)
     * @param  int $digito_cpf_pagador Dígito verificador do CPF do pagador. Ex: 82 (optional)
     * @param  string $data_inicio_vencimento Data inicial de vencimento do boleto que delimita o período da consulta. Campo não obrigatório. Se informado Data Início, deixando em branco a Data Fim, o sistema deve assumir a data atual como Data Fim. Ex: 22.04.2020 (optional)
     * @param  string $data_fim_vencimento Data final de vencimento do boleto que delimita o período da consulta - deverá ser maior que a data de início. Campo não obrigatório. Se informado, deverá ser preenchido dataInicioVencimento. Ex: 28.04.2020 (optional)
     * @param  string $data_inicio_registro Data inicial do registro do boleto que delimita o período da consulta. Ex: 22.04.2020 (optional)
     * @param  string $data_fim_registro Data final do registro do boleto que delimita o período da consulta - deverá ser maior que a data de início. Campo não obrigatório. Se informado, deverá ser preenchido dataInicioRegistro. Ex: 28.04.2020 (optional)
     * @param  string $data_inicio_movimento Delimita o período da consulta  de boletos liquidados, baixados ou protestados, caso seja informado, no campo codigoEstadoTituloCobranca os códigos 05, 06, 07 ou 09. Ex: 22.04.2020 (optional)
     * @param  string $data_fim_movimento Data final do movimento que delimita o período da consulta  de boletos liquidados, baixados ou protestados, caso seja informado, no campo codigoEstadoTituloCobranca os códigos 05, 06, 07 ou 09. Data fim deverá ser maior que a data de início. Campo não obrigatório. Se informado, deverá ser preenchido dataInicioMovimento. Ex: 28.04.2020 (optional)
     * @param  int $codigo_estado_titulo_cobranca Código da situação atual do boleto.   Domínios:  01 - NORMAL 02 - MOVIMENTO CARTORIO 03 - EM CARTORIO 04 - TITULO COM OCORRENCIA DE CARTORIO 05 - PROTESTADO ELETRONICO 06 - LIQUIDADO 07 - BAIXADO 08 - TITULO COM PENDENCIA DE CARTORIO 09 - TITULO PROTESTADO MANUAL 10 - TITULO BAIXADO/PAGO EM CARTORIO 11 - TITULO LIQUIDADO/PROTESTADO 12 - TITULO LIQUID/PGCRTO 13 - TITULO PROTESTADO AGUARDANDO BAIXA 14 - TITULO EM LIQUIDACAO 15 - TITULO AGENDADO 16 - TITULO CREDITADO 17 - PAGO EM CHEQUE - AGUARD.LIQUIDACAO 18 - PAGO PARCIALMENTE CREDITADO 80 - EM PROCESSAMENTO (ESTADO TRANSITÓRIO) (optional)
     * @param  string $boleto_vencido Indica se o Boleto está vencido ou não. Campo obrigatoriamente MAIÚSCULO. Domínio: S para boletos vencidos N para boletos não vencidos (optional)
     * @param  int $indice Somente deve ser utilizado em caso de pesquisas que retornem mais de 300 boletos. Caso o campo RPST \&quot;Indicador Continuidade\&quot; retorne com o valor \&quot;S\&quot;, o usuário deve informar o conteúdo do campo RPST \&quot;Numero Ultimo Registro\&quot; a partir do qual será iniciada nova consulta. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listaBoletosIdAsync($gw_dev_app_key, $authorization, $indicador_situacao, $agencia_beneficiario, $conta_beneficiario, $conta_caucao = null, $carteira_convenio = null, $variacao_carteira_convenio = null, $modalidade_cobranca = null, $cnpj_pagador = null, $digito_cnpj_pagador = null, $cpf_pagador = null, $digito_cpf_pagador = null, $data_inicio_vencimento = null, $data_fim_vencimento = null, $data_inicio_registro = null, $data_fim_registro = null, $data_inicio_movimento = null, $data_fim_movimento = null, $codigo_estado_titulo_cobranca = null, $boleto_vencido = null, $indice = null)
    {
        return $this->listaBoletosIdAsyncWithHttpInfo($gw_dev_app_key, $authorization, $indicador_situacao, $agencia_beneficiario, $conta_beneficiario, $conta_caucao, $carteira_convenio, $variacao_carteira_convenio, $modalidade_cobranca, $cnpj_pagador, $digito_cnpj_pagador, $cpf_pagador, $digito_cpf_pagador, $data_inicio_vencimento, $data_fim_vencimento, $data_inicio_registro, $data_fim_registro, $data_inicio_movimento, $data_fim_movimento, $codigo_estado_titulo_cobranca, $boleto_vencido, $indice)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation listaBoletosIdAsyncWithHttpInfo
     *
     * Lista Boletos
     *
     * @param  string $gw_dev_app_key É a chave de acesso do aplicativo do desenvolvedor utilizada em produção, obtida no Portal do Desenvolvedor. Essa chave será usada para identificação do aplicativo.  Para os testes em ambiente de homologação, trocar por gw-app-key.  Ex: 0021239456d80136bebf005056891bed. CAMPO OBRIGATÓRIO. (required)
     * @param  string $authorization É um \&quot;token\&quot; de acesso fornecido pelo OAuth 2.0. Ex: Bearer [ACCESS_TOKEN] (required)
     * @param  string $indicador_situacao Situação do boleto. Campo obrigatoriamente MAIÚSCULO. Domínios: A - Em ser B - Baixados/Protestados/Liquidados (required)
     * @param  int $agencia_beneficiario Número da agência do beneficiário, sem o dígito verificador. Ex: 452. CAMPO OBRIGATÓRIO. (required)
     * @param  int $conta_beneficiario Número da conta do beneficiário, sem o dígito verificador. Ex: 123873. CAMPO OBRIGATÓRIO. (required)
     * @param  int $conta_caucao Número da conta caução.  Domínio: 1 - Compõe Garantia; 2 - Não Compõe Garantia; 4 - Não Compõe Garantia (vencimento superior a 180 dias); 5 - Não Compõe Garantia (Vedado); 6 - Em análise; 7 - Em análise; 8 - Não Compõe Garantia. (optional)
     * @param  int $carteira_convenio Número da carteira do convênio de cobrança. Ex: 17 (optional)
     * @param  int $variacao_carteira_convenio Número da variação da carteira do convênio de cobrança. Ex: 35 (optional)
     * @param  int $modalidade_cobranca Código para identificar a característica dos boletos dentro das modalidades de cobrança existentes no BB. Domínio: 1 - SIMPLES COM REGISTRO 2 - SIMPLES SEM REGISTRO 4 - VINCULADA 6 - DESCONTADA 8 - FINANCIADA VENDOR (optional)
     * @param  int $cnpj_pagador CNPJ do pagador Ex: 123456789012 (optional)
     * @param  int $digito_cnpj_pagador Dígito verificador do CNPJ do pagador Ex: 12 (optional)
     * @param  int $cpf_pagador CPF do pagador sem o dígito. Ex: 711285901 (optional)
     * @param  int $digito_cpf_pagador Dígito verificador do CPF do pagador. Ex: 82 (optional)
     * @param  string $data_inicio_vencimento Data inicial de vencimento do boleto que delimita o período da consulta. Campo não obrigatório. Se informado Data Início, deixando em branco a Data Fim, o sistema deve assumir a data atual como Data Fim. Ex: 22.04.2020 (optional)
     * @param  string $data_fim_vencimento Data final de vencimento do boleto que delimita o período da consulta - deverá ser maior que a data de início. Campo não obrigatório. Se informado, deverá ser preenchido dataInicioVencimento. Ex: 28.04.2020 (optional)
     * @param  string $data_inicio_registro Data inicial do registro do boleto que delimita o período da consulta. Ex: 22.04.2020 (optional)
     * @param  string $data_fim_registro Data final do registro do boleto que delimita o período da consulta - deverá ser maior que a data de início. Campo não obrigatório. Se informado, deverá ser preenchido dataInicioRegistro. Ex: 28.04.2020 (optional)
     * @param  string $data_inicio_movimento Delimita o período da consulta  de boletos liquidados, baixados ou protestados, caso seja informado, no campo codigoEstadoTituloCobranca os códigos 05, 06, 07 ou 09. Ex: 22.04.2020 (optional)
     * @param  string $data_fim_movimento Data final do movimento que delimita o período da consulta  de boletos liquidados, baixados ou protestados, caso seja informado, no campo codigoEstadoTituloCobranca os códigos 05, 06, 07 ou 09. Data fim deverá ser maior que a data de início. Campo não obrigatório. Se informado, deverá ser preenchido dataInicioMovimento. Ex: 28.04.2020 (optional)
     * @param  int $codigo_estado_titulo_cobranca Código da situação atual do boleto.   Domínios:  01 - NORMAL 02 - MOVIMENTO CARTORIO 03 - EM CARTORIO 04 - TITULO COM OCORRENCIA DE CARTORIO 05 - PROTESTADO ELETRONICO 06 - LIQUIDADO 07 - BAIXADO 08 - TITULO COM PENDENCIA DE CARTORIO 09 - TITULO PROTESTADO MANUAL 10 - TITULO BAIXADO/PAGO EM CARTORIO 11 - TITULO LIQUIDADO/PROTESTADO 12 - TITULO LIQUID/PGCRTO 13 - TITULO PROTESTADO AGUARDANDO BAIXA 14 - TITULO EM LIQUIDACAO 15 - TITULO AGENDADO 16 - TITULO CREDITADO 17 - PAGO EM CHEQUE - AGUARD.LIQUIDACAO 18 - PAGO PARCIALMENTE CREDITADO 80 - EM PROCESSAMENTO (ESTADO TRANSITÓRIO) (optional)
     * @param  string $boleto_vencido Indica se o Boleto está vencido ou não. Campo obrigatoriamente MAIÚSCULO. Domínio: S para boletos vencidos N para boletos não vencidos (optional)
     * @param  int $indice Somente deve ser utilizado em caso de pesquisas que retornem mais de 300 boletos. Caso o campo RPST \&quot;Indicador Continuidade\&quot; retorne com o valor \&quot;S\&quot;, o usuário deve informar o conteúdo do campo RPST \&quot;Numero Ultimo Registro\&quot; a partir do qual será iniciada nova consulta. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listaBoletosIdAsyncWithHttpInfo($gw_dev_app_key, $authorization, $indicador_situacao, $agencia_beneficiario, $conta_beneficiario, $conta_caucao = null, $carteira_convenio = null, $variacao_carteira_convenio = null, $modalidade_cobranca = null, $cnpj_pagador = null, $digito_cnpj_pagador = null, $cpf_pagador = null, $digito_cpf_pagador = null, $data_inicio_vencimento = null, $data_fim_vencimento = null, $data_inicio_registro = null, $data_fim_registro = null, $data_inicio_movimento = null, $data_fim_movimento = null, $codigo_estado_titulo_cobranca = null, $boleto_vencido = null, $indice = null)
    {
        $returnType = '\Swagger\Client\Model\RespostaListaBoletos[]';
        $request = $this->listaBoletosIdRequest($gw_dev_app_key, $authorization, $indicador_situacao, $agencia_beneficiario, $conta_beneficiario, $conta_caucao, $carteira_convenio, $variacao_carteira_convenio, $modalidade_cobranca, $cnpj_pagador, $digito_cnpj_pagador, $cpf_pagador, $digito_cpf_pagador, $data_inicio_vencimento, $data_fim_vencimento, $data_inicio_registro, $data_fim_registro, $data_inicio_movimento, $data_fim_movimento, $codigo_estado_titulo_cobranca, $boleto_vencido, $indice);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'listaBoletosId'
     *
     * @param  string $gw_dev_app_key É a chave de acesso do aplicativo do desenvolvedor utilizada em produção, obtida no Portal do Desenvolvedor. Essa chave será usada para identificação do aplicativo.  Para os testes em ambiente de homologação, trocar por gw-app-key.  Ex: 0021239456d80136bebf005056891bed. CAMPO OBRIGATÓRIO. (required)
     * @param  string $authorization É um \&quot;token\&quot; de acesso fornecido pelo OAuth 2.0. Ex: Bearer [ACCESS_TOKEN] (required)
     * @param  string $indicador_situacao Situação do boleto. Campo obrigatoriamente MAIÚSCULO. Domínios: A - Em ser B - Baixados/Protestados/Liquidados (required)
     * @param  int $agencia_beneficiario Número da agência do beneficiário, sem o dígito verificador. Ex: 452. CAMPO OBRIGATÓRIO. (required)
     * @param  int $conta_beneficiario Número da conta do beneficiário, sem o dígito verificador. Ex: 123873. CAMPO OBRIGATÓRIO. (required)
     * @param  int $conta_caucao Número da conta caução.  Domínio: 1 - Compõe Garantia; 2 - Não Compõe Garantia; 4 - Não Compõe Garantia (vencimento superior a 180 dias); 5 - Não Compõe Garantia (Vedado); 6 - Em análise; 7 - Em análise; 8 - Não Compõe Garantia. (optional)
     * @param  int $carteira_convenio Número da carteira do convênio de cobrança. Ex: 17 (optional)
     * @param  int $variacao_carteira_convenio Número da variação da carteira do convênio de cobrança. Ex: 35 (optional)
     * @param  int $modalidade_cobranca Código para identificar a característica dos boletos dentro das modalidades de cobrança existentes no BB. Domínio: 1 - SIMPLES COM REGISTRO 2 - SIMPLES SEM REGISTRO 4 - VINCULADA 6 - DESCONTADA 8 - FINANCIADA VENDOR (optional)
     * @param  int $cnpj_pagador CNPJ do pagador Ex: 123456789012 (optional)
     * @param  int $digito_cnpj_pagador Dígito verificador do CNPJ do pagador Ex: 12 (optional)
     * @param  int $cpf_pagador CPF do pagador sem o dígito. Ex: 711285901 (optional)
     * @param  int $digito_cpf_pagador Dígito verificador do CPF do pagador. Ex: 82 (optional)
     * @param  string $data_inicio_vencimento Data inicial de vencimento do boleto que delimita o período da consulta. Campo não obrigatório. Se informado Data Início, deixando em branco a Data Fim, o sistema deve assumir a data atual como Data Fim. Ex: 22.04.2020 (optional)
     * @param  string $data_fim_vencimento Data final de vencimento do boleto que delimita o período da consulta - deverá ser maior que a data de início. Campo não obrigatório. Se informado, deverá ser preenchido dataInicioVencimento. Ex: 28.04.2020 (optional)
     * @param  string $data_inicio_registro Data inicial do registro do boleto que delimita o período da consulta. Ex: 22.04.2020 (optional)
     * @param  string $data_fim_registro Data final do registro do boleto que delimita o período da consulta - deverá ser maior que a data de início. Campo não obrigatório. Se informado, deverá ser preenchido dataInicioRegistro. Ex: 28.04.2020 (optional)
     * @param  string $data_inicio_movimento Delimita o período da consulta  de boletos liquidados, baixados ou protestados, caso seja informado, no campo codigoEstadoTituloCobranca os códigos 05, 06, 07 ou 09. Ex: 22.04.2020 (optional)
     * @param  string $data_fim_movimento Data final do movimento que delimita o período da consulta  de boletos liquidados, baixados ou protestados, caso seja informado, no campo codigoEstadoTituloCobranca os códigos 05, 06, 07 ou 09. Data fim deverá ser maior que a data de início. Campo não obrigatório. Se informado, deverá ser preenchido dataInicioMovimento. Ex: 28.04.2020 (optional)
     * @param  int $codigo_estado_titulo_cobranca Código da situação atual do boleto.   Domínios:  01 - NORMAL 02 - MOVIMENTO CARTORIO 03 - EM CARTORIO 04 - TITULO COM OCORRENCIA DE CARTORIO 05 - PROTESTADO ELETRONICO 06 - LIQUIDADO 07 - BAIXADO 08 - TITULO COM PENDENCIA DE CARTORIO 09 - TITULO PROTESTADO MANUAL 10 - TITULO BAIXADO/PAGO EM CARTORIO 11 - TITULO LIQUIDADO/PROTESTADO 12 - TITULO LIQUID/PGCRTO 13 - TITULO PROTESTADO AGUARDANDO BAIXA 14 - TITULO EM LIQUIDACAO 15 - TITULO AGENDADO 16 - TITULO CREDITADO 17 - PAGO EM CHEQUE - AGUARD.LIQUIDACAO 18 - PAGO PARCIALMENTE CREDITADO 80 - EM PROCESSAMENTO (ESTADO TRANSITÓRIO) (optional)
     * @param  string $boleto_vencido Indica se o Boleto está vencido ou não. Campo obrigatoriamente MAIÚSCULO. Domínio: S para boletos vencidos N para boletos não vencidos (optional)
     * @param  int $indice Somente deve ser utilizado em caso de pesquisas que retornem mais de 300 boletos. Caso o campo RPST \&quot;Indicador Continuidade\&quot; retorne com o valor \&quot;S\&quot;, o usuário deve informar o conteúdo do campo RPST \&quot;Numero Ultimo Registro\&quot; a partir do qual será iniciada nova consulta. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function listaBoletosIdRequest($gw_dev_app_key, $authorization, $indicador_situacao, $agencia_beneficiario, $conta_beneficiario, $conta_caucao = null, $carteira_convenio = null, $variacao_carteira_convenio = null, $modalidade_cobranca = null, $cnpj_pagador = null, $digito_cnpj_pagador = null, $cpf_pagador = null, $digito_cpf_pagador = null, $data_inicio_vencimento = null, $data_fim_vencimento = null, $data_inicio_registro = null, $data_fim_registro = null, $data_inicio_movimento = null, $data_fim_movimento = null, $codigo_estado_titulo_cobranca = null, $boleto_vencido = null, $indice = null)
    {
        // verify the required parameter 'gw_dev_app_key' is set
        if ($gw_dev_app_key === null || (is_array($gw_dev_app_key) && count($gw_dev_app_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $gw_dev_app_key when calling listaBoletosId'
            );
        }
        // verify the required parameter 'authorization' is set
        if ($authorization === null || (is_array($authorization) && count($authorization) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $authorization when calling listaBoletosId'
            );
        }
        // verify the required parameter 'indicador_situacao' is set
        if ($indicador_situacao === null || (is_array($indicador_situacao) && count($indicador_situacao) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $indicador_situacao when calling listaBoletosId'
            );
        }
        // verify the required parameter 'agencia_beneficiario' is set
        if ($agencia_beneficiario === null || (is_array($agencia_beneficiario) && count($agencia_beneficiario) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $agencia_beneficiario when calling listaBoletosId'
            );
        }
        // verify the required parameter 'conta_beneficiario' is set
        if ($conta_beneficiario === null || (is_array($conta_beneficiario) && count($conta_beneficiario) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $conta_beneficiario when calling listaBoletosId'
            );
        }

        $resourcePath = '/boletos';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($gw_dev_app_key !== null) {
            $queryParams['gw-dev-app-key'] = ObjectSerializer::toQueryValue($gw_dev_app_key, null);
        }
        // query params
        if ($indicador_situacao !== null) {
            $queryParams['indicadorSituacao'] = ObjectSerializer::toQueryValue($indicador_situacao, null);
        }
        // query params
        if ($conta_caucao !== null) {
            $queryParams['contaCaucao'] = ObjectSerializer::toQueryValue($conta_caucao, 'int32');
        }
        // query params
        if ($agencia_beneficiario !== null) {
            $queryParams['agenciaBeneficiario'] = ObjectSerializer::toQueryValue($agencia_beneficiario, 'int32');
        }
        // query params
        if ($conta_beneficiario !== null) {
            $queryParams['contaBeneficiario'] = ObjectSerializer::toQueryValue($conta_beneficiario, 'int64');
        }
        // query params
        if ($carteira_convenio !== null) {
            $queryParams['carteiraConvenio'] = ObjectSerializer::toQueryValue($carteira_convenio, 'int32');
        }
        // query params
        if ($variacao_carteira_convenio !== null) {
            $queryParams['variacaoCarteiraConvenio'] = ObjectSerializer::toQueryValue($variacao_carteira_convenio, 'int32');
        }
        // query params
        if ($modalidade_cobranca !== null) {
            $queryParams['modalidadeCobranca'] = ObjectSerializer::toQueryValue($modalidade_cobranca, 'int32');
        }
        // query params
        if ($cnpj_pagador !== null) {
            $queryParams['cnpjPagador'] = ObjectSerializer::toQueryValue($cnpj_pagador, 'int64');
        }
        // query params
        if ($digito_cnpj_pagador !== null) {
            $queryParams['digitoCNPJPagador'] = ObjectSerializer::toQueryValue($digito_cnpj_pagador, 'int32');
        }
        // query params
        if ($cpf_pagador !== null) {
            $queryParams['cpfPagador'] = ObjectSerializer::toQueryValue($cpf_pagador, 'int64');
        }
        // query params
        if ($digito_cpf_pagador !== null) {
            $queryParams['digitoCPFPagador'] = ObjectSerializer::toQueryValue($digito_cpf_pagador, 'int32');
        }
        // query params
        if ($data_inicio_vencimento !== null) {
            $queryParams['dataInicioVencimento'] = ObjectSerializer::toQueryValue($data_inicio_vencimento, null);
        }
        // query params
        if ($data_fim_vencimento !== null) {
            $queryParams['dataFimVencimento'] = ObjectSerializer::toQueryValue($data_fim_vencimento, null);
        }
        // query params
        if ($data_inicio_registro !== null) {
            $queryParams['dataInicioRegistro'] = ObjectSerializer::toQueryValue($data_inicio_registro, null);
        }
        // query params
        if ($data_fim_registro !== null) {
            $queryParams['dataFimRegistro'] = ObjectSerializer::toQueryValue($data_fim_registro, null);
        }
        // query params
        if ($data_inicio_movimento !== null) {
            $queryParams['dataInicioMovimento'] = ObjectSerializer::toQueryValue($data_inicio_movimento, null);
        }
        // query params
        if ($data_fim_movimento !== null) {
            $queryParams['dataFimMovimento'] = ObjectSerializer::toQueryValue($data_fim_movimento, null);
        }
        // query params
        if ($codigo_estado_titulo_cobranca !== null) {
            $queryParams['codigoEstadoTituloCobranca'] = ObjectSerializer::toQueryValue($codigo_estado_titulo_cobranca, 'int32');
        }
        // query params
        if ($boleto_vencido !== null) {
            $queryParams['boletoVencido'] = ObjectSerializer::toQueryValue($boleto_vencido, null);
        }
        // query params
        if ($indice !== null) {
            $queryParams['indice'] = ObjectSerializer::toQueryValue($indice, 'int64');
        }
        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = ObjectSerializer::toHeaderValue($authorization);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation permitirBaixaCancelamentoId
     *
     * Permitir a baixa/cancelamento de um  título de cobrança.
     *
     * @param  \Swagger\Client\Model\RequisicaoBaixaBoleto $body body (required)
     * @param  string $authorization É um \&quot;token\&quot; de acesso fornecido pelo OAuth 2.0. Ex: Bearer [ACCESS_TOKEN] (required)
     * @param  string $gw_dev_app_key É a chave de acesso do aplicativo do desenvolvedor utilizada em produção, obtida no Portal do Desenvolvedor. Essa chave será usada para identificação do aplicativo.  Para os testes em ambiente de homologação, trocar por gw-app-key.  Ex: 0021239456d80136bebf005056891bed. CAMPO OBRIGATÓRIO. (required)
     * @param  string $id Número do boleto bancário (único e exclusivo) que identifica o título e é usado para pagá-lo. (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\RespostaBaixaBoleto
     */
    public function permitirBaixaCancelamentoId($body, $authorization, $gw_dev_app_key, $id)
    {
        list($response) = $this->permitirBaixaCancelamentoIdWithHttpInfo($body, $authorization, $gw_dev_app_key, $id);
        return $response;
    }

    /**
     * Operation permitirBaixaCancelamentoIdWithHttpInfo
     *
     * Permitir a baixa/cancelamento de um  título de cobrança.
     *
     * @param  \Swagger\Client\Model\RequisicaoBaixaBoleto $body (required)
     * @param  string $authorization É um \&quot;token\&quot; de acesso fornecido pelo OAuth 2.0. Ex: Bearer [ACCESS_TOKEN] (required)
     * @param  string $gw_dev_app_key É a chave de acesso do aplicativo do desenvolvedor utilizada em produção, obtida no Portal do Desenvolvedor. Essa chave será usada para identificação do aplicativo.  Para os testes em ambiente de homologação, trocar por gw-app-key.  Ex: 0021239456d80136bebf005056891bed. CAMPO OBRIGATÓRIO. (required)
     * @param  string $id Número do boleto bancário (único e exclusivo) que identifica o título e é usado para pagá-lo. (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\RespostaBaixaBoleto, HTTP status code, HTTP response headers (array of strings)
     */
    public function permitirBaixaCancelamentoIdWithHttpInfo($body, $authorization, $gw_dev_app_key, $id)
    {
        $returnType = '\Swagger\Client\Model\RespostaBaixaBoleto';
        $request = $this->permitirBaixaCancelamentoIdRequest($body, $authorization, $gw_dev_app_key, $id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\RespostaBaixaBoleto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\Erro',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErroOAuthNaoAutorizado',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\Erro',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\Erro',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation permitirBaixaCancelamentoIdAsync
     *
     * Permitir a baixa/cancelamento de um  título de cobrança.
     *
     * @param  \Swagger\Client\Model\RequisicaoBaixaBoleto $body (required)
     * @param  string $authorization É um \&quot;token\&quot; de acesso fornecido pelo OAuth 2.0. Ex: Bearer [ACCESS_TOKEN] (required)
     * @param  string $gw_dev_app_key É a chave de acesso do aplicativo do desenvolvedor utilizada em produção, obtida no Portal do Desenvolvedor. Essa chave será usada para identificação do aplicativo.  Para os testes em ambiente de homologação, trocar por gw-app-key.  Ex: 0021239456d80136bebf005056891bed. CAMPO OBRIGATÓRIO. (required)
     * @param  string $id Número do boleto bancário (único e exclusivo) que identifica o título e é usado para pagá-lo. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function permitirBaixaCancelamentoIdAsync($body, $authorization, $gw_dev_app_key, $id)
    {
        return $this->permitirBaixaCancelamentoIdAsyncWithHttpInfo($body, $authorization, $gw_dev_app_key, $id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation permitirBaixaCancelamentoIdAsyncWithHttpInfo
     *
     * Permitir a baixa/cancelamento de um  título de cobrança.
     *
     * @param  \Swagger\Client\Model\RequisicaoBaixaBoleto $body (required)
     * @param  string $authorization É um \&quot;token\&quot; de acesso fornecido pelo OAuth 2.0. Ex: Bearer [ACCESS_TOKEN] (required)
     * @param  string $gw_dev_app_key É a chave de acesso do aplicativo do desenvolvedor utilizada em produção, obtida no Portal do Desenvolvedor. Essa chave será usada para identificação do aplicativo.  Para os testes em ambiente de homologação, trocar por gw-app-key.  Ex: 0021239456d80136bebf005056891bed. CAMPO OBRIGATÓRIO. (required)
     * @param  string $id Número do boleto bancário (único e exclusivo) que identifica o título e é usado para pagá-lo. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function permitirBaixaCancelamentoIdAsyncWithHttpInfo($body, $authorization, $gw_dev_app_key, $id)
    {
        $returnType = '\Swagger\Client\Model\RespostaBaixaBoleto';
        $request = $this->permitirBaixaCancelamentoIdRequest($body, $authorization, $gw_dev_app_key, $id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'permitirBaixaCancelamentoId'
     *
     * @param  \Swagger\Client\Model\RequisicaoBaixaBoleto $body (required)
     * @param  string $authorization É um \&quot;token\&quot; de acesso fornecido pelo OAuth 2.0. Ex: Bearer [ACCESS_TOKEN] (required)
     * @param  string $gw_dev_app_key É a chave de acesso do aplicativo do desenvolvedor utilizada em produção, obtida no Portal do Desenvolvedor. Essa chave será usada para identificação do aplicativo.  Para os testes em ambiente de homologação, trocar por gw-app-key.  Ex: 0021239456d80136bebf005056891bed. CAMPO OBRIGATÓRIO. (required)
     * @param  string $id Número do boleto bancário (único e exclusivo) que identifica o título e é usado para pagá-lo. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function permitirBaixaCancelamentoIdRequest($body, $authorization, $gw_dev_app_key, $id)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling permitirBaixaCancelamentoId'
            );
        }
        // verify the required parameter 'authorization' is set
        if ($authorization === null || (is_array($authorization) && count($authorization) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $authorization when calling permitirBaixaCancelamentoId'
            );
        }
        // verify the required parameter 'gw_dev_app_key' is set
        if ($gw_dev_app_key === null || (is_array($gw_dev_app_key) && count($gw_dev_app_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $gw_dev_app_key when calling permitirBaixaCancelamentoId'
            );
        }
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling permitirBaixaCancelamentoId'
            );
        }

        $resourcePath = '/boletos/{id}/baixar';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($gw_dev_app_key !== null) {
            $queryParams['gw-dev-app-key'] = ObjectSerializer::toQueryValue($gw_dev_app_key, null);
        }
        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = ObjectSerializer::toHeaderValue($authorization);
        }

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
